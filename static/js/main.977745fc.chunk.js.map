{"version":3,"sources":["Components/Footer/Footer.module.css","Components/FieldCreatingNewTasks/FieldCreatingNewTasks.module.css","TodoList.module.css","Components/TaskList/TaskList.module.css","Components/TaskList/Task/Task.module.css","Components/TaskList/Task/Task.jsx","HOOKS/useDispatch.js","Components/TaskList/Task/TaskContainer.jsx","Models/ActionConst.js","State/ToDo-Reselect.js","HOOKS/useSelector.js","Components/TaskList/TaskList.jsx","Components/FieldCreatingNewTasks/FieldCreatingNewTasks.jsx","Components/FieldCreatingNewTasks/FieldCreatingNewTasksContainer.jsx","Components/Footer/Footer.jsx","Components/Footer/FooterContainer.jsx","Components/TodoListApp/TodoListApp.jsx","TodoList.js","Utils/LocalStorage.js","Models/todo-Reducer.js","State/Store.js","index.js"],"names":["module","exports","memo","isCheck","id","task","editMode","cacheValueTask","currentEditTask","changeBox","removeTask","startChangeTask","changeValueTask","stopChangeTask","className","classes","item","onDoubleClick","ref","autoFocus","classnames","edit","active","value","onChange","e","currentTarget","onBlur","onKeyDown","toggle","type","onClick","checkboxCustom","check","text","removeBtn","taskText","useDispatchHook","dispatch","useDispatch","useCallback","payload","TaskContainer","tasks","useState","setEditMode","changeCacheValueTask","changeCheck","removeTaskHook","removeEmptyTask","endEditTask","useRef","stopEditTask","changedTasks","map","t","title","filter","event","key","current","getTasksReselect","createSelector","state","getAllSelectedReselect","allSelected","getLeftTasksReselect","leftTasks","getFilterValueReselect","getFilteredTasks","useHookSelector","func","params","useSelector","TaskList","tasksd","filteredTasks","index","getFilteredTasksReselect","main","todoList","isTasks","changeValue","selectAll","isAllSelected","header","onKeyPress","todosInput","placeholder","toggleAll","FieldCreatingNewTaskContainer","addTask","selectedAllTasks","editValue","trim","nanoid","Boolean","Footer","removeSelectedTask","filterTasks","dataFooter","todoCount","filters","href","filterBtnJs","innerText","clear","FooterContainer","removeSelectedTasks","length","method","TodoListApp","headerText","todo","TodoList","props","controllAllSelected","getCountLeftTasks","useEffect","count","localStorage","setItem","JSON","stringify","getStorage","prop","valueDefault","getItem","parse","initialState","taskReducer","action","reducer","combineReducers","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.977745fc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dataFooter\":\"Footer_dataFooter__1Qwen\",\"todoCount\":\"Footer_todoCount__1CcRj\",\"filters\":\"Footer_filters__5t2EO\",\"clear\":\"Footer_clear__2aJGt\",\"active\":\"Footer_active__14w6u\",\"filterBtnJs\":\"Footer_filterBtnJs__2B824\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"FieldCreatingNewTasks_header__1O1fB\",\"todosInput\":\"FieldCreatingNewTasks_todosInput__17N2v\",\"toggleAll\":\"FieldCreatingNewTasks_toggleAll__2i-9Q\",\"active\":\"FieldCreatingNewTasks_active__247XH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"headerText\":\"TodoList_headerText__2jkBW\",\"todo\":\"TodoList_todo__1CS5R\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"TaskList_main__DLCrZ\",\"todoList\":\"TaskList_todoList__2Aene\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Task_item__2Ugjx\",\"removeBtn\":\"Task_removeBtn__3h8DL\",\"toggle\":\"Task_toggle__A4FfK\",\"redactor\":\"Task_redactor__3pPaR\",\"taskText\":\"Task_taskText__uLqQR\",\"checkboxCustom\":\"Task_checkboxCustom__26eOQ\",\"text\":\"Task_text__2Hyq1\",\"check\":\"Task_check__NIDTR\",\"edit\":\"Task_edit__1wp3_\",\"active\":\"Task_active__1EmoS\"};","import React, { memo } from 'react';\r\nimport classes from './Task.module.css';\r\nimport classnames from 'classnames';\r\n\r\nconst Task = ({\r\n  isCheck,\r\n  id,\r\n  task,\r\n  editMode,\r\n  cacheValueTask,\r\n  currentEditTask,\r\n  changeBox,\r\n  removeTask,\r\n  startChangeTask,\r\n  changeValueTask,\r\n  stopChangeTask\r\n}) => {\r\n  \r\n  return (\r\n    <li className={classes.item} onDoubleClick={startChangeTask}>\r\n      {!editMode\r\n        ? <label className={classes.toggle}>\r\n          <input type=\"checkbox\"/>\r\n          <span\r\n            onClick={changeBox}\r\n            className={classnames(\r\n            classes.checkboxCustom,\r\n            isCheck && classes.check\r\n          )}\r\n          />\r\n          <span className={classes.text} id={id}>\r\n            {task}\r\n          </span>\r\n          <button className={classes.removeBtn} onClick={removeTask}/>\r\n          <button className={classes.taskText}/>\r\n      </label>\r\n        : <input\r\n          ref={currentEditTask}\r\n          autoFocus\r\n          className={classnames(\r\n            classes.edit,\r\n            editMode && classes.active\r\n          )}\r\n          value={cacheValueTask}\r\n          onChange={(e) => changeValueTask(e.currentTarget.value)}\r\n          onBlur={(e) => stopChangeTask(e, cacheValueTask)}\r\n          onKeyDown={(e) => stopChangeTask(e, cacheValueTask)}\r\n        />\r\n      }\r\n    </li>\r\n  )\r\n};\r\n\r\nexport default memo(Task);","import { useCallback } from 'react';\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nconst useDispatchHook = type => {\r\n  const dispatch = useDispatch();\r\n  return useCallback((payload = {}) => dispatch({type, payload}), [\r\n    dispatch,\r\n    type\r\n  ]);\r\n};\r\n\r\nexport default useDispatchHook;\r\n\r\n","import React, { useState, useCallback, useRef } from 'react';\r\nimport Task from './Task';\r\nimport useDispatchHook from \"../../../HOOKS/useDispatch\";\r\nimport {CHANGE_TASK_STATUS, END_EDIT_TASK, REMOVE_EMPTY_TASK, REMOVE_TASK} from \"../../../Models/ActionConst\";\r\n\r\nconst TaskContainer = ({\r\n  id,\r\n  isCheck,\r\n  task,\r\n  tasks\r\n}) => {\r\n  const [editMode, setEditMode] = useState(false);\r\n  const [cacheValueTask, changeCacheValueTask] = useState('');\r\n  const changeCheck = useDispatchHook(CHANGE_TASK_STATUS);\r\n  const removeTaskHook = useDispatchHook(REMOVE_TASK);\r\n  const removeEmptyTask = useDispatchHook(REMOVE_EMPTY_TASK);\r\n  const endEditTask = useDispatchHook(END_EDIT_TASK);\r\n  const currentEditTask = useRef(null);\r\n  \r\n  \r\n  const changeBox = () => {\r\n    const changedTasks = tasks.map(t => {\r\n      if (t.id === id) {\r\n        return {...t, check: !t.check}\r\n      } else {\r\n        return {...t, check: t.check}\r\n      }});\r\n    changeCheck(changedTasks);\r\n  };\r\n\r\n  const removeTask = () => {\r\n    const changedTasks = tasks.filter(t => t.id !== id);\r\n    removeTaskHook(changedTasks);\r\n  };\r\n\r\n  const startChangeTask = () => {\r\n    setEditMode(true);\r\n    changeCacheValueTask(task);\r\n  };\r\n\r\n  const changeValueTask = useCallback((value) => {\r\n    changeCacheValueTask(value);\r\n  }, [changeCacheValueTask]);\r\n\r\n  const stopEditTask = (value) => {\r\n    let changedTasks = tasks.map(t => {\r\n      if (t.id === id) {\r\n        return {...t, title: value}\r\n      } else {\r\n        return {...t}\r\n      }\r\n    });\r\n    endEditTask(changedTasks);\r\n    if (value === '') {\r\n      changedTasks = changedTasks.filter(t => t.title !== '');\r\n      removeEmptyTask(changedTasks);\r\n    }\r\n    setEditMode(false);\r\n  };\r\n\r\n\r\n  const stopChangeTask = (event, value) => {\r\n    if (event.key === 'Enter') {\r\n      stopEditTask(value);\r\n    } else if (event.currentTarget === currentEditTask.current && !event.key) {\r\n      stopEditTask(value);\r\n    } else if (event.key === 'Escape') {\r\n      stopEditTask(task);\r\n    }\r\n  };\r\n\r\n\r\n  return (\r\n    <Task\r\n      isCheck = {isCheck}\r\n      id = {id}\r\n      task = {task}\r\n      editMode={editMode}\r\n      cacheValueTask={cacheValueTask}\r\n      currentEditTask={currentEditTask}\r\n      changeBox={changeBox}\r\n      removeTask={removeTask}\r\n      startChangeTask={startChangeTask}\r\n      changeValueTask={(changeValueTask)}\r\n      stopChangeTask={stopChangeTask}\r\n    />\r\n  )\r\n};\r\n\r\nexport default TaskContainer;","export const ADD_TASK = 'ADD_TASK';\r\nexport const CHANGE_TASK_STATUS = 'CHANGE__CHECK';\r\nexport const REMOVE_TASK = 'REMOVE_TASK';\r\nexport const SELECT_ALL_TASK = 'SELECT_ALL_TASK';\r\nexport const CONTROL_ALL_SELECTED = 'CONTROL_ALL_SELECTED';\r\nexport const LEFT_TASKS = 'LEFT_TASKS';\r\nexport const REMOVE_SELECT_TASKS = 'REMOVE_SELECT_TASKS';\r\nexport const END_EDIT_TASK = 'END_EDIT_TASK';\r\nexport const REMOVE_EMPTY_TASK = 'REMOVE_EMPTY_TASK';\r\nexport const FILTER_TASKS =  'FILTER_TASKS';\r\n","import { createSelector } from \"reselect\";\r\nimport TaskContainer from \"../Components/TaskList/Task/TaskContainer\";\r\nimport React from \"react\";\r\n\r\nconst getTasks = (state) => {\r\n  return state.task.tasks;\r\n};\r\n\r\nexport const getTasksReselect = createSelector([getTasks], (tasks) => tasks);\r\n\r\nconst getAllSelectedFromState = (state) => {\r\n  return state.task.allSelected;\r\n};\r\n\r\nexport const getAllSelectedReselect = createSelector([getAllSelectedFromState], (allSelected) => allSelected);\r\n\r\nconst getLeftTasks = (state) => {\r\n  return state.task.leftTasks;\r\n};\r\n\r\nexport const getLeftTasksReselect = createSelector([getLeftTasks], (leftTasks) => leftTasks);\r\n\r\nconst getFilterValue = (state) => {\r\n  return state.task.filter;\r\n};\r\n\r\nexport const getFilterValueReselect = createSelector([getFilterValue], (filter) => filter);\r\n\r\nconst getFilteredTasks = (state) => {\r\n  return state.task.tasks;\r\n};\r\n\r\nexport const getFilteredTasksReselect = (type, tasks) => createSelector([getFilteredTasks], (filteredTasks) => {\r\n  return filteredTasks.map((t, index) => {\r\n    if (type === 'All') {\r\n      return <TaskContainer\r\n        key={index}\r\n        id={t.id}\r\n        isCheck={t.check}\r\n        task={t.title}\r\n        tasks = {tasks}\r\n      />\r\n    }\r\n    else if (type === 'Active' && !t.check) {\r\n      return <TaskContainer\r\n        key={index}\r\n        id={t.id}\r\n        isCheck={t.check}\r\n        task={t.title}\r\n        tasks = {tasks}\r\n      />\r\n    } else if (type === 'Completed' && t.check) {\r\n      return <TaskContainer\r\n        key={index}\r\n        id={t.id}\r\n        isCheck={t.check}\r\n        task={t.title}\r\n        tasks = {tasks}\r\n      />\r\n    }\r\n  });\r\n});","import {useSelector} from \"react-redux\";\r\n\r\nconst useHookSelector = (func, params = {}) => useSelector(state => func(state, params));\r\nexport default useHookSelector;","import React  from 'react';\r\nimport classes from './TaskList.module.css';\r\nimport useHookSelector from \"../../HOOKS/useSelector\";\r\nimport {getFilteredTasksReselect, getFilterValueReselect} from \"../../State/ToDo-Reselect\";\r\n\r\n\r\nconst TaskList = ({tasks}) => {\r\n  const filter = useHookSelector(getFilterValueReselect);\r\n  const tasksd = useHookSelector(getFilteredTasksReselect(filter, tasks));\r\n\r\n  return (<section className={classes.main}>\r\n      <ul className={classes.todoList}>\r\n        {tasksd}\r\n      </ul>\r\n    </section>\r\n  )\r\n};\r\n\r\n\r\nexport default TaskList;","import React, { memo } from 'react';\r\nimport classes from './FieldCreatingNewTasks.module.css';\r\nimport classnames from 'classnames';\r\n\r\nconst FieldCreatingNewTask =({\r\n  isTasks,\r\n  changeValue,\r\n  selectAll,\r\n  value,\r\n  isAllSelected\r\n}) => {\r\n  return (\r\n    <div className={classes.header}>\r\n      <input\r\n        onChange={changeValue}\r\n        onKeyPress={changeValue}\r\n        autoFocus\r\n        className={classes.todosInput}\r\n        value={value}\r\n        placeholder=\"What needs to be done?\"\r\n      />\r\n      {isTasks &&\r\n      <button\r\n        onClick={selectAll}\r\n        className={classnames(\r\n          classes.toggleAll,\r\n          isAllSelected && classes.active\r\n        )}\r\n      />}\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport default  memo(FieldCreatingNewTask);","import React, { useState, useCallback } from 'react';\r\nimport FieldCreatingNewTask from './FieldCreatingNewTasks';\r\nimport nanoid from 'nanoid';\r\nimport useHookSelector from \"../../HOOKS/useSelector\";\r\nimport {getAllSelectedReselect} from \"../../State/ToDo-Reselect\";\r\nimport useDispatchHook from \"../../HOOKS/useDispatch\";\r\nimport {ADD_TASK, SELECT_ALL_TASK} from \"../../Models/ActionConst\";\r\n\r\nconst FieldCreatingNewTaskContainer = ({tasks}) => {\r\n  const allSelected = useHookSelector(getAllSelectedReselect);\r\n  const addTask = useDispatchHook(ADD_TASK);\r\n  const selectedAllTasks = useDispatchHook(SELECT_ALL_TASK);\r\n  let [value, editValue] = useState('');\r\n\r\n  const changeValue = useCallback(e => {\r\n    editValue(e.currentTarget.value);\r\n    if (e.key === 'Enter' && e.currentTarget.value.trim()) {\r\n      tasks = [...tasks, {id: nanoid(), check: false, title: e.currentTarget.value}];\r\n      addTask(tasks);\r\n      editValue('');\r\n    }\r\n  }, [tasks, value]);\r\n  \r\n\r\n  const selectAll = () => {\r\n    tasks = tasks.map(t => ({...t, check: !allSelected}));\r\n    selectedAllTasks(tasks);\r\n  };\r\n\r\n\r\n  return (\r\n    <FieldCreatingNewTask\r\n      isTasks = {Boolean(tasks)}\r\n      selectAll = {selectAll}\r\n      isAllSelected = {Boolean(allSelected)}\r\n      value = {value}\r\n      changeValue = {changeValue}\r\n    />\r\n  )\r\n};\r\n\r\n\r\nexport default FieldCreatingNewTaskContainer;","import React from 'react';\r\nimport classes from './Footer.module.css';\r\nimport classnames from 'classnames';\r\n\r\n\r\nconst Footer = ({\r\n  leftTasks,\r\n  removeSelectedTask,\r\n  tasks,\r\n  filter,\r\n  filterTasks\r\n}) => {\r\n  return (\r\n    <div className={classes.dataFooter}>\r\n\t\t  <span className={classes.todoCount}>\r\n\t\t\t<strong>{leftTasks}</strong>\r\n\t\t\t  item left\r\n\t\t  </span>\r\n        <ul className={classes.filters}>\r\n          <li>\r\n            <a href=\"#/All\"\r\n              className={classnames(\r\n                classes.filterBtnJs,\r\n                filter === 'All' && classes.active\r\n              )}\r\n              onClick={(e) => filterTasks(e.currentTarget.innerText)}>All</a>\r\n          </li>\r\n          <li>\r\n            <a href=\"#/Active\"\r\n              className={classnames(\r\n                classes.filterBtnJs,\r\n                filter === 'Active' && classes.active\r\n              )}\r\n              onClick={(e) => filterTasks(e.currentTarget.innerText)}>Active</a>\r\n          </li>\r\n          <li>\r\n            <a href=\"#/Completed\"\r\n              className={classnames(\r\n                classes.filterBtnJs,\r\n                filter === 'Completed' && classes.active\r\n              )}\r\n              onClick={(e) => filterTasks(e.currentTarget.innerText)}>Completed</a>\r\n          </li>\r\n        </ul>\r\n        <button\r\n          className={classnames(\r\n            classes.clear,\r\n            leftTasks < tasks && classes.active\r\n          )}\r\n          onClick={() => {removeSelectedTask()}}>\r\n          Clear completed\r\n        </button>\r\n      </div>\r\n    )\r\n};\r\n\r\nexport default Footer;","import React from 'react';\r\nimport Footer from './Footer';\r\nimport useHookSelector from \"../../HOOKS/useSelector\";\r\nimport {getFilterValueReselect, getLeftTasksReselect} from \"../../State/ToDo-Reselect\";\r\nimport useDispatchHook from \"../../HOOKS/useDispatch\";\r\nimport {FILTER_TASKS, REMOVE_SELECT_TASKS} from \"../../Models/ActionConst\";\r\n\r\n\r\nconst FooterContainer = ({tasks}) => {\r\n  const leftTasks = useHookSelector(getLeftTasksReselect);\r\n  const filter = useHookSelector(getFilterValueReselect);\r\n  const removeSelectedTasks = useDispatchHook(REMOVE_SELECT_TASKS);\r\n  const filterTasks = useDispatchHook(FILTER_TASKS);\r\n  \r\n  const filteredTasks = (method) => {\r\n    filterTasks(method);\r\n  };\r\n  \r\n  const removeSelectedTask = () => {\r\n    const task = tasks.filter(t => !t.check);\r\n    removeSelectedTasks(task)\r\n  };\r\n  \r\n  \r\n\r\n  return (\r\n    <Footer\r\n      leftTasks={leftTasks}\r\n      removeSelectedTask={removeSelectedTask}\r\n      tasks={tasks.length}\r\n      filter={filter}\r\n      filterTasks = {filteredTasks}\r\n    />\r\n  )\r\n};\r\n\r\nexport default FooterContainer;","import React from 'react';\r\nimport classes from './../../TodoList.module.css';\r\nimport TaskList from '../TaskList/TaskList';\r\nimport FieldCreatingNewTaskContainer from '../FieldCreatingNewTasks/FieldCreatingNewTasksContainer';\r\nimport FooterContainer from '../Footer/FooterContainer';\r\n\r\n\r\nconst TodoListApp = ({tasks}) => {\r\n  return (\r\n    <>\r\n      <header className={classes.headerText}>todos</header>\r\n      <div className={classes.todo}>\r\n        <FieldCreatingNewTaskContainer tasks = {tasks}/>\r\n        <TaskList tasks = {tasks}/>\r\n        {Boolean(tasks.length) && <FooterContainer tasks = {tasks}/>}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TodoListApp;\r\n","import React, { useEffect } from 'react';\nimport {\n  getFilterValueReselect,\n  getTasksReselect,\n} from './State/ToDo-Reselect';\nimport TodoListApp from './Components/TodoListApp/TodoListApp';\nimport useHookSelector from \"./HOOKS/useSelector\";\nimport {CONTROL_ALL_SELECTED, LEFT_TASKS} from \"./Models/ActionConst\";\nimport useDispatchHook from \"./HOOKS/useDispatch\";\n\n\n\nconst  TodoList  = (props) => {\n  \n  \n  const tasks = useHookSelector(getTasksReselect);\n  const filter = useHookSelector(getFilterValueReselect);\n  const controllAllSelected = useDispatchHook(CONTROL_ALL_SELECTED);\n  const getCountLeftTasks = useDispatchHook(LEFT_TASKS);\n  useEffect(() => {\n    const count = tasks.filter(t => !t.check).length;\n    getCountLeftTasks(count);\n    controllAllSelected();\n    localStorage.setItem('todo', JSON.stringify(tasks));\n    localStorage.setItem('filter', JSON.stringify(filter));\n  }, [tasks, controllAllSelected, filter, props, getCountLeftTasks]);\n\n    return (\n     <TodoListApp  tasks = {tasks}/>\n    );\n};\n\n\n\nexport default TodoList;\n","export const getStorage = (prop, valueDefault = []) => {\r\n  if (localStorage.getItem(prop)) {\r\n    return JSON.parse(localStorage.getItem(prop));\r\n  }\r\n  return valueDefault;\r\n};\r\n\r\n","import { getStorage } from \"../Utils/LocalStorage\";\r\nimport {\r\n  ADD_TASK,\r\n  CHANGE_TASK_STATUS,\r\n  CONTROL_ALL_SELECTED, END_EDIT_TASK, FILTER_TASKS, LEFT_TASKS, REMOVE_EMPTY_TASK,\r\n  REMOVE_SELECT_TASKS,\r\n  REMOVE_TASK,\r\n  SELECT_ALL_TASK\r\n} from \"./ActionConst\";\r\n\r\n\r\n\r\nlet initialState = {\r\n  tasks: getStorage('todo'),\r\n  allSelected: false,\r\n  leftTasks: 0,\r\n  filter: getStorage('filter', 'All'),\r\n};\r\n\r\n\r\nconst taskReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case ADD_TASK:\r\n        return {\r\n          ...state,\r\n          tasks: action.payload,\r\n      };\r\n    case CHANGE_TASK_STATUS:\r\n      return {\r\n        ...state,\r\n        tasks: action.payload\r\n      };\r\n    case REMOVE_TASK:\r\n      return {\r\n        ...state,\r\n        tasks: action.payload\r\n      };\r\n    case REMOVE_SELECT_TASKS:\r\n      return {\r\n        ...state,\r\n        tasks: action.payload\r\n      };\r\n    case SELECT_ALL_TASK:\r\n      return {\r\n        ...state,\r\n        tasks: action.payload\r\n      };\r\n    case CONTROL_ALL_SELECTED:\r\n      return {\r\n        ...state,\r\n        allSelected: !state.leftTasks && state.tasks.length,\r\n      };\r\n    case LEFT_TASKS:\r\n      return {\r\n        ...state,\r\n        leftTasks: action.payload\r\n      };\r\n    case END_EDIT_TASK:\r\n      return {\r\n        ...state,\r\n        tasks: action.payload\r\n      };\r\n    case REMOVE_EMPTY_TASK:\r\n      return {\r\n        ...state,\r\n        tasks: action.payload\r\n      };\r\n    case FILTER_TASKS:\r\n      return {\r\n        ...state,\r\n        filter: action.payload\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n\r\nexport default taskReducer;","import { combineReducers, createStore } from 'redux';\r\nimport taskReducer from './../Models/todo-Reducer';\r\n\r\n\r\nlet reducer = combineReducers(\r\n  {\r\n    task: taskReducer\r\n  }\r\n);\r\n\r\nlet store = createStore(reducer);\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport TodoList from './TodoList';\nimport store from \"./State/Store\";\nimport {Provider} from \"react-redux\";\n\nReactDOM.render (\n  <Provider store={store}>\n  <TodoList/>\n  </Provider>, document.getElementById('root'));"],"sourceRoot":""}