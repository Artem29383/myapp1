{"version":3,"sources":["components/footer/Footer.module.css","components/fieldCreatingNewTasks/FieldCreatingNewTasks.module.css","TodoList.module.css","components/taskList/TaskList.module.css","components/taskList/Task/Task.module.css","utils/localStorage.js","utils/removePropFromObject.js","utils/removeArrayElement.js","utils/original.js","models/todo/reducers.js","models/todo/actions.js","state/Store.js","models/todo/selectors.js","hooks/useSelector.js","hooks/useAction.js","components/taskList/Task/Task.jsx","components/taskList/Task/TaskContainer.jsx","components/taskList/TaskList.jsx","components/fieldCreatingNewTasks/FieldCreatingNewTasks.jsx","components/fieldCreatingNewTasks/FieldCreatingNewTasksContainer.jsx","components/footer/Footer.jsx","components/footer/FooterContainer.jsx","components/todoList/TodoList.jsx","index.js"],"names":["module","exports","getStorage","prop","valueDefault","localStorage","getItem","JSON","parse","removePropFromObject","obj","id","res","removeArrayElement","index","indexOf","splice","original","stringify","initialState","tasks","myTasks","schema","Entity","dataNormalized","normalize","entities","ids","result","allSelected","leftTasks","filter","taskReducer","state","action","copyIds","tasksCopy","deepCopy","check","title","type","payload","map","reducer","combineReducers","task","store","createStore","devToolsEnhancer","subscribe","setItem","getState","getTasks","getTasksReselect","createSelector","getIds","getIdsReselect","getFilterValueReselect","getTasksCountReselect","length","isTasksReselect","Boolean","isAllSelectedReselect","some","el","getLeftTasksReselect","t","func","params","useSelector","useAction","dispatch","useDispatch","useCallback","memo","isCheck","editMode","cacheValueTask","currentEditTask","changeBox","removeTask","startChangeTask","changeValueTask","stopChangeTask","className","classes","item","onDoubleClick","ref","autoFocus","classnames","edit","active","value","onChange","e","currentTarget","onBlur","onKeyDown","toggle","onClick","checkboxCustom","text","removeBtn","taskText","TaskContainer","useState","setEditMode","changeCacheValueTask","changeCheck","removeTaskHook","endEditTask","useRef","stopEditTask","event","key","current","TaskList","filteredTasks","getFilteredTasksReselect","main","todoList","isTasks","changeValue","selectAll","isAllSelected","header","onKeyPress","todosInput","placeholder","toggleAll","FieldCreatingNewTaskContainer","countTasks","addTask","selectedAllTasks","editValue","trim","nanoid","Footer","removeSelectedTask","filterTasks","dataFooter","todoCount","filters","href","filterBtnJs","innerText","clear","FooterContainer","removeSelectedTasks","method","TodoList","headerText","todo","ReactDOM","render","controllAllSelected","getCountLeftTasks","count","useEffect","document","getElementById"],"mappings":"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","file":"static/js/main.493c7834.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dataFooter\":\"Footer_dataFooter__22-Se\",\"todoCount\":\"Footer_todoCount__1PuTS\",\"filters\":\"Footer_filters__3dO_E\",\"clear\":\"Footer_clear__3veQd\",\"active\":\"Footer_active__EeWba\",\"filterBtnJs\":\"Footer_filterBtnJs__2EB7K\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"FieldCreatingNewTasks_header__1NmQW\",\"todosInput\":\"FieldCreatingNewTasks_todosInput__2t_Zs\",\"toggleAll\":\"FieldCreatingNewTasks_toggleAll__ks75C\",\"active\":\"FieldCreatingNewTasks_active__2-Sbv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"headerText\":\"TodoList_headerText__2jkBW\",\"todo\":\"TodoList_todo__1CS5R\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"TaskList_main__1SuYp\",\"todoList\":\"TaskList_todoList__2mKL_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Task_item__JiYci\",\"removeBtn\":\"Task_removeBtn__1sz5U\",\"toggle\":\"Task_toggle__3fEH1\",\"redactor\":\"Task_redactor__1I0yX\",\"taskText\":\"Task_taskText__3Uucy\",\"checkboxCustom\":\"Task_checkboxCustom__3Iipx\",\"text\":\"Task_text__1RRNW\",\"check\":\"Task_check__1LVuI\",\"edit\":\"Task_edit__10Fv9\",\"active\":\"Task_active__31Jxc\"};","export const getStorage = (prop, valueDefault = {}) => {\r\n  if (localStorage.getItem(prop)) {\r\n    return JSON.parse(localStorage.getItem(prop));\r\n  }\r\n  return valueDefault;\r\n};\r\n\r\n","export const removePropFromObject = (obj, id) => {\r\n  let res = {...obj};\r\n  delete res[id];\r\n  return res;\r\n};","export const removeArrayElement = (obj, id) => {\r\n  const index = obj.indexOf(id);\r\n  obj.splice(index, 1);\r\n  return obj;\r\n};","export default original => JSON.parse(JSON.stringify(original));","import { getStorage } from '../../utils/localStorage';\r\nimport {\r\n  ADD_TASK,\r\n  CHANGE_TASK_STATUS,\r\n  CONTROL_ALL_SELECTED,\r\n  END_EDIT_TASK,\r\n  FILTER_TASKS,\r\n  LEFT_TASKS,\r\n  REMOVE_SELECT_TASKS,\r\n  REMOVE_TASK,\r\n  SELECT_ALL_TASK\r\n} from './actions';\r\nimport {\r\n  normalize,\r\n  schema\r\n} from 'normalizr';\r\nimport { removePropFromObject } from '../../utils/removePropFromObject';\r\nimport { removeArrayElement } from '../../utils/removeArrayElement';\r\nimport  deepCopy  from '../../utils/original';\r\n\r\nlet initialState = {\r\n  tasks: getStorage('todo'),\r\n};\r\n\r\nconst tasksScheme = new schema.Entity('tasks');\r\nconst myTasks = {tasks: [tasksScheme]};\r\nconst dataNormalized = normalize(initialState, myTasks);\r\ninitialState = {\r\n  tasks: {\r\n    entities: dataNormalized.entities.tasks || {},\r\n    ids: dataNormalized.result.tasks || []\r\n  },\r\n  allSelected: false,\r\n  leftTasks: 0,\r\n  filter: getStorage('filter', 'All'),\r\n};\r\n\r\n\r\nconst taskReducer = (state = initialState, action) => {\r\n  let entities = {...state.tasks.entities};\r\n  let copyIds = [...state.tasks.ids];\r\n  const tasksCopy = deepCopy(state.tasks);\r\n  let [id, check, title] = [];\r\n  switch (action.type) {\r\n    case ADD_TASK:\r\n      [id, title] = action.payload;\r\n      tasksCopy.entities[id] = {id, check: false, title};\r\n      tasksCopy.ids = [...tasksCopy.ids, id];\r\n      return {\r\n        ...state,\r\n        tasks: tasksCopy\r\n      };\r\n    case CHANGE_TASK_STATUS:\r\n      [id, check, title] = action.payload;\r\n      tasksCopy.entities[id] = {id, check, title};\r\n      return {\r\n        ...state,\r\n        tasks: tasksCopy\r\n      };\r\n    case REMOVE_TASK:\r\n      return {\r\n        ...state,\r\n        tasks: {\r\n          ...state.tasks,\r\n          entities: removePropFromObject(entities, action.payload),\r\n          ids: removeArrayElement(copyIds, action.payload)\r\n        }\r\n      };\r\n    case REMOVE_SELECT_TASKS:\r\n      state.tasks.ids.map(id => {\r\n        if (entities[id].check) {\r\n          delete entities[id];\r\n          copyIds = removeArrayElement(copyIds, id);\r\n        }\r\n      });\r\n      return {\r\n        ...state,\r\n        tasks: {\r\n          entities,\r\n          ids: copyIds\r\n        }\r\n      };\r\n    case SELECT_ALL_TASK:\r\n      copyIds.map(id => entities[id].check = !state.allSelected);\r\n      return {\r\n        ...state,\r\n        tasks: {\r\n          entities,\r\n          ids: copyIds\r\n        }\r\n      };\r\n    case CONTROL_ALL_SELECTED:\r\n      return {\r\n        ...state,\r\n        allSelected: !action.payload,\r\n      };\r\n    case LEFT_TASKS:\r\n      return {\r\n        ...state,\r\n        leftTasks: action.payload\r\n      };\r\n    case END_EDIT_TASK:\r\n      [id, check, title] = action.payload;\r\n      tasksCopy.entities[id] = {id, check, title};\r\n      return {\r\n        ...state,\r\n        tasks: tasksCopy\r\n      };\r\n    case FILTER_TASKS:\r\n      return {\r\n        ...state,\r\n        filter: action.payload\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n\r\nexport default taskReducer;","export const ADD_TASK = 'ADD_TASK';\r\nexport const CHANGE_TASK_STATUS = 'CHANGE__CHECK';\r\nexport const REMOVE_TASK = 'REMOVE_TASK';\r\nexport const SELECT_ALL_TASK = 'SELECT_ALL_TASK';\r\nexport const CONTROL_ALL_SELECTED = 'CONTROL_ALL_SELECTED';\r\nexport const LEFT_TASKS = 'LEFT_TASKS';\r\nexport const REMOVE_SELECT_TASKS = 'REMOVE_SELECT_TASKS';\r\nexport const END_EDIT_TASK = 'END_EDIT_TASK';\r\nexport const FILTER_TASKS =  'FILTER_TASKS';\r\n","import { combineReducers, createStore } from 'redux';\r\nimport taskReducer from '../models/todo/reducers';\r\nimport { devToolsEnhancer } from 'redux-devtools-extension';\r\n\r\n\r\nconst reducer = combineReducers(\r\n  {\r\n    task: taskReducer\r\n  }\r\n);\r\n\r\nconst store = createStore(reducer, /* preloadedState, */ devToolsEnhancer(\r\n  // Specify name here, actionsBlacklist, actionsCreators and other options if needed\r\n));\r\n\r\nstore.subscribe(() => {\r\n  localStorage.setItem('todo', JSON.stringify(store.getState().task.tasks));\r\n  localStorage.setItem('filter', JSON.stringify(store.getState().task.filter));\r\n});\r\n\r\nexport default store;","import { createSelector } from 'reselect';\r\n\r\nconst getTasks = (state) => {\r\n  return state.task.tasks.entities;\r\n};\r\n\r\nexport const getTasksReselect = createSelector([getTasks], (entities) => entities);\r\n\r\nconst getIds = (state) => {\r\n  return state.task.tasks.ids;\r\n};\r\n\r\nexport const getIdsReselect = createSelector([getIds], (ids) => ids);\r\n\r\n\r\n\r\nconst getFilterValue = (state) => {\r\n  return state.task.filter;\r\n};\r\n\r\nexport const getFilterValueReselect = createSelector([getFilterValue], (filter) => filter);\r\n\r\nexport const getFilteredTasksReselect = (type, tasks) => createSelector([getIds], (ids) => {\r\n  return ids.filter(t => {\r\n    switch (type) {\r\n      case 'All':\r\n        return tasks[t];\r\n      case 'Active':\r\n        return !tasks[t].check;\r\n      case 'Completed':\r\n        return tasks[t].check;\r\n      default:\r\n        return tasks[t];\r\n    }\r\n  });\r\n});\r\n\r\nexport const getTasksCountReselect = createSelector([getIds], (ids) => ids.length);\r\n\r\nexport const isTasksReselect = createSelector([getTasksCountReselect], (ids) => Boolean(ids));\r\n\r\nexport const isAllSelectedReselect = createSelector([getTasks, getIds], (entities, ids) => {\r\n  return ids.some(el => !entities[el].check);\r\n});\r\n\r\nexport const getLeftTasksReselect = createSelector([getTasks, getIds], (entities, ids) => {\r\n  return ids.filter(t => !entities[t].check).length;\r\n});","import { useSelector } from 'react-redux';\r\n\r\nexport default (func, params = {}) => useSelector(state => func(state, params));","import { useCallback } from 'react';\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nconst useAction = type => {\r\n  const dispatch = useDispatch();\r\n  return useCallback((payload = {}) => dispatch({type, payload}), [\r\n    dispatch,\r\n    type\r\n  ]);\r\n};\r\n\r\nexport default useAction;\r\n\r\n","import React, { memo } from 'react';\r\nimport classes from './Task.module.css';\r\nimport classnames from 'classnames';\r\n\r\nconst Task = ({\r\n  isCheck,\r\n  id,\r\n  task,\r\n  editMode,\r\n  cacheValueTask,\r\n  currentEditTask,\r\n  changeBox,\r\n  removeTask,\r\n  startChangeTask,\r\n  changeValueTask,\r\n  stopChangeTask\r\n}) => {\r\n  \r\n  return (\r\n    <li className={classes.item} onDoubleClick={startChangeTask}>\r\n      {!editMode\r\n        ? <label className={classes.toggle}>\r\n          <input type=\"checkbox\"/>\r\n          <span\r\n            onClick={changeBox}\r\n            className={classnames(\r\n            classes.checkboxCustom,\r\n            isCheck && classes.check\r\n          )}\r\n          />\r\n          <span className={classes.text} id={id}>\r\n            {task}\r\n          </span>\r\n          <button className={classes.removeBtn} onClick={removeTask} />\r\n          <button className={classes.taskText} />\r\n      </label>\r\n        : <input\r\n          ref={currentEditTask}\r\n          autoFocus\r\n          className={classnames(\r\n            classes.edit,\r\n            editMode && classes.active\r\n          )}\r\n          value={cacheValueTask}\r\n          onChange={(e) => changeValueTask(e.currentTarget.value)}\r\n          onBlur={(e) => stopChangeTask(e, cacheValueTask)}\r\n          onKeyDown={(e) => stopChangeTask(e, cacheValueTask)}\r\n        />\r\n      }\r\n    </li>\r\n  )\r\n};\r\n\r\nexport default memo(Task);","import React, { useState, useCallback, useRef } from 'react';\r\nimport Task from './Task';\r\nimport useAction from '../../../hooks/useAction';\r\nimport {\r\n  CHANGE_TASK_STATUS,\r\n  END_EDIT_TASK,\r\n  REMOVE_TASK } from '../../../models/todo/actions';\r\n\r\nconst TaskContainer = ({\r\n  id,\r\n  isCheck,\r\n  task,\r\n}) => {\r\n  const [editMode, setEditMode] = useState(false);\r\n  const [cacheValueTask, changeCacheValueTask] = useState('');\r\n  const changeCheck = useAction(CHANGE_TASK_STATUS);\r\n  const removeTaskHook = useAction(REMOVE_TASK);\r\n  const endEditTask = useAction(END_EDIT_TASK);\r\n  const currentEditTask = useRef(null);\r\n  const changeBox = () => {\r\n    changeCheck([id, !isCheck, task]);\r\n  };\r\n  const removeTask = () => {\r\n    removeTaskHook(id);\r\n  };\r\n\r\n  const startChangeTask = () => {\r\n    setEditMode(true);\r\n    changeCacheValueTask(task);\r\n  };\r\n\r\n  const changeValueTask = useCallback((value) => {\r\n    changeCacheValueTask(value);\r\n  }, [changeCacheValueTask]);\r\n\r\n  const stopEditTask = (value) => {\r\n    endEditTask([id, isCheck, value]);\r\n    if (value === '') {\r\n      removeTaskHook(id);\r\n    }\r\n    setEditMode(false);\r\n  };\r\n\r\n\r\n  const stopChangeTask = (event, value) => {\r\n    if (event.key === 'Enter') {\r\n      stopEditTask(value);\r\n    } else if (event.currentTarget === currentEditTask.current && !event.key) {\r\n      stopEditTask(value);\r\n    } else if (event.key === 'Escape') {\r\n      stopEditTask(task);\r\n    }\r\n  };\r\n\r\n\r\n  return (\r\n    <Task\r\n      isCheck = {isCheck}\r\n      id = {id}\r\n      task = {task}\r\n      editMode={editMode}\r\n      cacheValueTask={cacheValueTask}\r\n      currentEditTask={currentEditTask}\r\n      changeBox={changeBox}\r\n      removeTask={removeTask}\r\n      startChangeTask={startChangeTask}\r\n      changeValueTask={(changeValueTask)}\r\n      stopChangeTask={stopChangeTask}\r\n    />\r\n  )\r\n};\r\n\r\nexport default TaskContainer;","import React  from 'react';\r\nimport classes from './TaskList.module.css';\r\nimport useSelector from '../../hooks/useSelector';\r\nimport {\r\n  getFilteredTasksReselect,\r\n  getFilterValueReselect,\r\n  getTasksReselect\r\n} from '../../models/todo/selectors';\r\nimport TaskContainer from './Task/TaskContainer';\r\n\r\n\r\nconst TaskList = () => {\r\n  let tasks = useSelector(getTasksReselect);\r\n  const filter = useSelector(getFilterValueReselect);\r\n  const filteredTasks = useSelector(getFilteredTasksReselect(filter, tasks));\r\n  tasks = filteredTasks.map((t, index) => {\r\n    return <TaskContainer\r\n      key={index}\r\n      id={tasks[t].id}\r\n      isCheck={tasks[t].check}\r\n      task={tasks[t].title}\r\n      tasks = {tasks}\r\n    />;\r\n  });\r\n  \r\n  \r\n  return (<section className={classes.main}>\r\n      <ul className={classes.todoList}>\r\n        {tasks}\r\n      </ul>\r\n    </section>\r\n  )\r\n};\r\n\r\n\r\nexport default TaskList;","import React, { memo } from 'react';\r\nimport classes from './FieldCreatingNewTasks.module.css';\r\nimport classnames from 'classnames';\r\n\r\nconst FieldCreatingNewTask =({\r\n  isTasks,\r\n  changeValue,\r\n  selectAll,\r\n  value,\r\n  isAllSelected\r\n}) => {\r\n  return (\r\n    <div className={classes.header}>\r\n      <input\r\n        onChange={changeValue}\r\n        onKeyPress={changeValue}\r\n        autoFocus\r\n        className={classes.todosInput}\r\n        value={value}\r\n        placeholder=\"What needs to be done?\"\r\n      />\r\n      {isTasks &&\r\n      <button\r\n        onClick={selectAll}\r\n        className={classnames(\r\n          classes.toggleAll,\r\n          !isAllSelected && classes.active\r\n        )}\r\n      />}\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport default  memo(FieldCreatingNewTask);","import React, { useState, useCallback } from 'react';\r\nimport FieldCreatingNewTask from './FieldCreatingNewTasks';\r\nimport nanoid from 'nanoid';\r\nimport useSelector from '../../hooks/useSelector';\r\nimport { isAllSelectedReselect } from '../../models/todo/selectors';\r\nimport useAction from '../../hooks/useAction';\r\nimport { ADD_TASK, SELECT_ALL_TASK } from '../../models/todo/actions';\r\n\r\nconst FieldCreatingNewTaskContainer = ({countTasks}) => {\r\n  const allSelected =  useSelector(isAllSelectedReselect);\r\n  const addTask = useAction(ADD_TASK);\r\n  const selectedAllTasks = useAction(SELECT_ALL_TASK);\r\n  const [value, editValue] = useState('');\r\n\r\n  const changeValue = useCallback(e => {\r\n    editValue(e.currentTarget.value);\r\n    if (e.key === 'Enter' && e.currentTarget.value.trim()) {\r\n      addTask([nanoid(), e.currentTarget.value]);\r\n      editValue('');\r\n    }\r\n  }, [editValue, addTask]);\r\n  \r\n\r\n  const selectAll = () => {\r\n      selectedAllTasks();\r\n  };\r\n\r\n  return (\r\n    <FieldCreatingNewTask\r\n      isTasks = {countTasks}\r\n      selectAll = {selectAll}\r\n      isAllSelected = {allSelected}\r\n      value = {value}\r\n      changeValue = {changeValue}\r\n    />\r\n  )\r\n};\r\n\r\n\r\nexport default FieldCreatingNewTaskContainer;","import React from 'react';\r\nimport classes from './Footer.module.css';\r\nimport classnames from 'classnames';\r\nimport { useSelector } from 'react-redux';\r\nimport { getTasksCountReselect } from '../../models/todo/selectors';\r\n\r\n\r\nconst Footer = ({\r\n  leftTasks,\r\n  removeSelectedTask,\r\n  filter,\r\n  filterTasks\r\n}) => {\r\n  const countTasks = useSelector(getTasksCountReselect);\r\n  return (\r\n    <div className={classes.dataFooter}>\r\n\t\t  <span className={classes.todoCount}>\r\n\t\t\t<strong>{leftTasks}</strong>\r\n\t\t\t  item left\r\n\t\t  </span>\r\n        <ul className={classes.filters}>\r\n          <li>\r\n            <a href=\"#/All\"\r\n              className={classnames(\r\n                classes.filterBtnJs,\r\n                filter === 'All' && classes.active\r\n              )}\r\n              onClick={(e) => filterTasks(e.currentTarget.innerText)}>All</a>\r\n          </li>\r\n          <li>\r\n            <a href=\"#/Active\"\r\n              className={classnames(\r\n                classes.filterBtnJs,\r\n                filter === 'Active' && classes.active\r\n              )}\r\n              onClick={(e) => filterTasks(e.currentTarget.innerText)}>Active</a>\r\n          </li>\r\n          <li>\r\n            <a href=\"#/Completed\"\r\n              className={classnames(\r\n                classes.filterBtnJs,\r\n                filter === 'Completed' && classes.active\r\n              )}\r\n              onClick={(e) => filterTasks(e.currentTarget.innerText)}>Completed</a>\r\n          </li>\r\n        </ul>\r\n        <button\r\n          className={classnames(\r\n            classes.clear,\r\n            leftTasks < countTasks && classes.active\r\n          )}\r\n          onClick={() => {removeSelectedTask()}}>\r\n          Clear completed\r\n        </button>\r\n      </div>\r\n    )\r\n};\r\n\r\nexport default Footer;","import React from 'react';\r\nimport Footer from './Footer';\r\nimport useSelector from '../../hooks/useSelector';\r\nimport {\r\n  getFilterValueReselect,\r\n  getLeftTasksReselect,\r\n} from '../../models/todo/selectors';\r\nimport useAction from '../../hooks/useAction';\r\nimport {\r\n  FILTER_TASKS,\r\n  REMOVE_SELECT_TASKS\r\n} from '../../models/todo/actions';\r\n\r\n\r\nconst FooterContainer = () => {\r\n  const leftTasks = useSelector(getLeftTasksReselect);\r\n  const filter = useSelector(getFilterValueReselect);\r\n  const removeSelectedTasks = useAction(REMOVE_SELECT_TASKS);\r\n  const filterTasks = useAction(FILTER_TASKS);\r\n  \r\n  const filteredTasks = (method) => {\r\n    filterTasks(method);\r\n  };\r\n  \r\n  const removeSelectedTask = () => {\r\n    removeSelectedTasks();\r\n  };\r\n  \r\n  \r\n  return (\r\n    <Footer\r\n      leftTasks={leftTasks}\r\n      removeSelectedTask={removeSelectedTask}\r\n      filter={filter}\r\n      filterTasks={filteredTasks}\r\n    />\r\n  )\r\n};\r\n\r\nexport default FooterContainer;","import React, { Fragment } from 'react';\r\nimport classes from './../../TodoList.module.css';\r\nimport TaskList from '../taskList/TaskList';\r\nimport FieldCreatingNewTaskContainer from '../fieldCreatingNewTasks/FieldCreatingNewTasksContainer';\r\nimport FooterContainer from '../footer/FooterContainer';\r\nimport useSelector from '../../hooks/useSelector';\r\nimport { isTasksReselect } from '../../models/todo/selectors';\r\n\r\n\r\nconst TodoList = () => {\r\n  const isTasks = useSelector(isTasksReselect);\r\n  return (\r\n    <Fragment>\r\n      <header className={classes.headerText}>todos</header>\r\n      <div className={classes.todo}>\r\n        <FieldCreatingNewTaskContainer countTasks = {isTasks} />\r\n        <TaskList />\r\n        {isTasks && <FooterContainer />}\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default TodoList;\r\n","import React, { useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport store from './state/Store';\nimport { Provider } from 'react-redux';\nimport {\n  getFilterValueReselect,\n  getIdsReselect,\n  getLeftTasksReselect,\n  getTasksReselect,\n  isAllSelectedReselect,\n} from './models/todo/selectors';\nimport useSelector from './hooks/useSelector';\nimport {\n  CONTROL_ALL_SELECTED,\n  LEFT_TASKS\n} from './models/todo/actions';\nimport useAction from './hooks/useAction';\nimport TodoList from './components/todoList/TodoList';\n\n\nconst TodoListApp = () => {\n  const isAllSelected = useSelector(isAllSelectedReselect);\n  const tasks = useSelector(getTasksReselect);\n  const filter = useSelector(getFilterValueReselect);\n  const ids = useSelector(getIdsReselect);\n  const controllAllSelected = useAction(CONTROL_ALL_SELECTED);\n  const getCountLeftTasks = useAction(LEFT_TASKS);\n  const count = useSelector(getLeftTasksReselect);\n  useEffect(() => {\n    getCountLeftTasks(count);\n    controllAllSelected(isAllSelected);\n  }, [tasks, ids, controllAllSelected, getCountLeftTasks, count, isAllSelected, filter]);\n  return (\n    <TodoList/>\n  );\n};\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <TodoListApp/>\n  </Provider>, document.getElementById('root'));\n\n"],"sourceRoot":""}