{"version":3,"sources":["components/footer/Footer.module.css","components/fieldCreatingNewTasks/FieldCreatingNewTasks.module.css","TodoList.module.css","components/taskList/TaskList.module.css","components/taskList/Task/Task.module.css","utils/localStorage.js","utils/removePropFromObject.js","utils/removeArrayElement.js","utils/deepCopy.js","models/todo/reducers.js","models/todo/actions.js","state/Store.js","hooks/useSelector.js","models/todo/selectors.js","components/taskList/Task/Task.jsx","hooks/useAction.js","components/taskList/Task/TaskContainer.jsx","components/taskList/TaskList.jsx","components/fieldCreatingNewTasks/FieldCreatingNewTasks.jsx","components/fieldCreatingNewTasks/FieldCreatingNewTasksContainer.jsx","components/footer/Footer.jsx","components/footer/FooterContainer.jsx","components/todoList/TodoList.jsx","index.js"],"names":["module","exports","getStorage","prop","valueDefault","localStorage","getItem","JSON","parse","removePropFromObject","obj","id","res","removeArrayElement","index","indexOf","splice","original","stringify","initialState","tasks","myTasks","schema","Entity","dataNormalized","normalize","entities","ids","result","filter","taskReducer","state","action","copyIds","tasksCopy","deepCopy","check","title","type","payload","map","reducer","combineReducers","task","store","createStore","devToolsEnhancer","subscribe","setItem","getState","func","params","useSelector","getTasks","getIds","getFilterValue","getFilterValueReselect","createSelector","getFilteredTasksReselect","t","getTasksCountReselect","length","isTasksReselect","Boolean","isAllSelectedReselect","some","el","getLeftTasksReselect","memo","isCheck","editMode","cacheValueTask","currentEditTask","changeBox","removeTask","startChangeTask","changeValueTask","stopChangeTask","className","classes","item","onDoubleClick","ref","autoFocus","classnames","edit","active","value","onChange","e","currentTarget","onBlur","onKeyDown","toggle","onClick","checkboxCustom","text","removeBtn","taskText","useAction","dispatch","useDispatch","useCallback","TaskContainer","useState","setEditMode","changeCacheValueTask","changeCheck","removeTaskHook","endEditTask","useRef","stopEditTask","event","key","current","TaskList","filteredTasks","main","todoList","isTasks","changeValue","selectAll","isAllSelected","header","onKeyPress","todosInput","placeholder","toggleAll","FieldCreatingNewTaskContainer","countTasks","allSelected","addTask","selectedAllTasks","editValue","trim","nanoid","Footer","leftTasks","removeSelectedTask","filterTasks","dataFooter","todoCount","filters","href","filterBtnJs","innerText","clear","FooterContainer","removeSelectedTasks","method","TodoList","headerText","todo","ReactDOM","render","document","getElementById"],"mappings":"uFACAA,EAAOC,QAAU,CAAC,WAAa,2BAA2B,UAAY,0BAA0B,QAAU,wBAAwB,MAAQ,sBAAsB,OAAS,uBAAuB,YAAc,8B,mBCA9MD,EAAOC,QAAU,CAAC,OAAS,sCAAsC,WAAa,0CAA0C,UAAY,yCAAyC,OAAS,wC,mBCAtLD,EAAOC,QAAU,CAAC,WAAa,6BAA6B,KAAO,yB,mBCAnED,EAAOC,QAAU,CAAC,KAAO,uBAAuB,SAAW,6B,2ECA3DD,EAAOC,QAAU,CAAC,KAAO,mBAAmB,UAAY,wBAAwB,OAAS,qBAAqB,SAAW,uBAAuB,SAAW,uBAAuB,eAAiB,6BAA6B,KAAO,mBAAmB,MAAQ,oBAAoB,KAAO,mBAAmB,OAAS,uB,2GCD5SC,EAAa,SAACC,GAA6B,IAAvBC,EAAsB,uDAAP,GAC9C,OAAIC,aAAaC,QAAQH,GAChBI,KAAKC,MAAMH,aAAaC,QAAQH,IAElCC,G,sOCJF,IAAMK,EAAuB,SAACC,EAAKC,GACxC,IAAIC,E,yVAAG,IAAOF,GAEd,cADOE,EAAID,GACJC,GCHIC,EAAqB,SAACH,EAAKC,GACtC,IAAMG,EAAQJ,EAAIK,QAAQJ,GAE1B,OADAD,EAAIM,OAAOF,EAAO,GACXJ,GCHM,WAAAO,GAAQ,OAAIV,KAAKC,MAAMD,KAAKW,UAAUD,K,yjBCkBrD,IAAIE,EAAe,CACjBC,MAAOlB,EAAW,SAIdmB,EAAU,CAACD,MAAO,CADJ,IAAIE,IAAOC,OAAO,WAEhCC,EAAiBC,YAAUN,EAAcE,GAC/CF,EAAe,CACbC,MAAO,CACLM,SAAUF,EAAeE,SAASN,OAAS,GAC3CO,IAAKH,EAAeI,OAAOR,OAAS,IAEtCS,OAAQ3B,EAAW,SAAU,QAI/B,IAuFe4B,EAvFK,WAAmC,IAAlCC,EAAiC,uDAAzBZ,EAAca,EAAW,uCAChDN,EAAQ,KAAOK,EAAMX,MAAMM,UAC3BO,EAAO,YAAOF,EAAMX,MAAMO,KACxBO,EAAYC,EAASJ,EAAMX,OAHmB,EAI3B,GAApBT,EAJ+C,EAI/CA,GAAIyB,EAJ2C,EAI3CA,MAAOC,EAJoC,EAIpCA,MAChB,OAAQL,EAAOM,MAGb,IC1CoB,WD0CpB,MACiBN,EAAOO,QAGtB,OAHE5B,EADJ,EACIA,GAAI0B,EADR,EACQA,MACNH,EAAUR,SAASf,GAAM,CAACA,KAAIyB,OAAO,EAAOC,SAC5CH,EAAUP,IAAV,sBAAoBO,EAAUP,KAA9B,CAAmChB,IAC5B,KACFoB,EADL,CAEEX,MAAOc,IAIX,ICnD8B,gBDmD9B,MACwBF,EAAOO,QAE7B,OAFE5B,EADJ,EACIA,GAAIyB,EADR,EACQA,MAAOC,EADf,EACeA,MACbH,EAAUR,SAASf,GAAM,CAACA,KAAIyB,QAAOC,SAC9B,KACFN,EADL,CAEEX,MAAOc,IAIX,IC3DuB,cD4DrB,OAAO,KACFH,EADL,CAEEX,MAAM,KACDW,EAAMX,MADN,CAEHM,SAAUjB,EAAqBiB,EAAUM,EAAOO,SAChDZ,IAAKd,EAAmBoB,EAASD,EAAOO,aAK9C,ICpE+B,sBD2E7B,OANAR,EAAMX,MAAMO,IAAIa,KAAI,SAAA7B,GACde,EAASf,GAAIyB,eACRV,EAASf,GAChBsB,EAAUpB,EAAmBoB,EAAStB,OAGnC,KACFoB,EADL,CAEEX,MAAO,CACLM,WACAC,IAAKM,KAKX,ICrF2B,kBDuFzB,OADAA,EAAQO,KAAI,SAAA7B,GAAE,OAAIe,EAASf,GAAIyB,MAAQJ,EAAOO,WACvC,KACFR,EADL,CAEEX,MAAO,CACLM,WACAC,IAAKM,KAKX,IC9FyB,gBD8FzB,MACwBD,EAAOO,QAE7B,OAFE5B,EADJ,EACIA,GAAIyB,EADR,EACQA,MAAOC,EADf,EACeA,MACbH,EAAUR,SAASf,GAAM,CAACA,KAAIyB,QAAOC,SAC9B,KACFN,EADL,CAEEX,MAAOc,IAIX,ICtGyB,eDuGvB,OAAO,KACFH,EADL,CAEEF,OAAQG,EAAOO,UAInB,QACE,OAAOR,I,QE/GPU,EAAUC,0BACd,CACEC,KAAMb,IAIJc,EAAQC,sBAAYJ,EAA+BK,8BAIzDF,EAAMG,WAAU,WACd1C,aAAa2C,QAAQ,OAAQzC,KAAKW,UAAU0B,EAAMK,WAAWN,KAAKvB,MAAMM,WACxErB,aAAa2C,QAAQ,SAAUzC,KAAKW,UAAU0B,EAAMK,WAAWN,KAAKd,YAGvDe,Q,gDClBA,WAACM,GAAD,IAAOC,EAAP,uDAAgB,GAAhB,OAAuBC,aAAY,SAAArB,GAAK,OAAImB,EAAKnB,EAAOoB,O,OCAjEE,EAAW,SAACtB,GAChB,OAAOA,EAAMY,KAAKvB,MAAMM,UAIpB4B,EAAS,SAACvB,GACd,OAAOA,EAAMY,KAAKvB,MAAMO,KAIpB4B,EAAiB,SAACxB,GACtB,OAAOA,EAAMY,KAAKd,QAIP2B,EAAyBC,YAAe,CAACF,IAAiB,SAAC1B,GAAD,OAAYA,KAGtE6B,EAA2BD,YAAe,CAACH,EAAQC,EAAgBF,IAAW,SAAC1B,EAAKW,EAAMlB,GACrG,OAAQkB,GACN,IAAK,MACH,MAAO,CAACX,EAAIE,QAAO,SAAA8B,GAAC,OAAIvC,EAAMuC,MAAKvC,GACrC,IAAK,SACH,MAAO,CAACO,EAAIE,QAAO,SAAA8B,GAAC,OAAKvC,EAAMuC,GAAGvB,SAAQhB,GAC5C,IAAK,YACH,MAAO,CAACO,EAAIE,QAAO,SAAA8B,GAAC,OAAIvC,EAAMuC,GAAGvB,SAAQhB,GAC3C,QACE,MAAO,CAACO,EAAIE,QAAO,SAAA8B,GAAC,OAAIvC,EAAMuC,MAAKvC,OAK5BwC,EAAwBH,YAAe,CAACH,IAAS,SAAC3B,GAAD,OAASA,EAAIkC,UAG9DC,EAAkBL,YAAe,CAACG,IAAwB,SAACjC,GAAD,OAASoC,QAAQpC,MAG3EqC,EAAwBP,YAAe,CAACJ,EAAUC,IAAS,SAAC5B,EAAUC,GACjF,OAAOA,EAAIsC,MAAK,SAAAC,GAAE,OAAKxC,EAASwC,GAAI9B,YAIzB+B,EAAuBV,YAAe,CAACJ,EAAUC,IAAS,SAAC5B,EAAUC,GAChF,OAAOA,EAAIE,QAAO,SAAA8B,GAAC,OAAKjC,EAASiC,GAAGvB,SAAOyB,U,gCCO9BO,kBAjDF,SAAC,GAYP,IAXLC,EAWI,EAXJA,QACA1D,EAUI,EAVJA,GACAgC,EASI,EATJA,KACA2B,EAQI,EARJA,SACAC,EAOI,EAPJA,eACAC,EAMI,EANJA,gBACAC,EAKI,EALJA,UACAC,EAII,EAJJA,WACAC,EAGI,EAHJA,gBACAC,EAEI,EAFJA,gBACAC,EACI,EADJA,eAGA,OACE,wBAAIC,UAAWC,IAAQC,KAAMC,cAAeN,GACxCL,EAgBE,2BACAY,IAAKV,EACLW,WAAS,EACTL,UAAWM,IACTL,IAAQM,KACRf,GAAYS,IAAQO,QAEtBC,MAAOhB,EACPiB,SAAU,SAACC,GAAD,OAAOb,EAAgBa,EAAEC,cAAcH,QACjDI,OAAQ,SAACF,GAAD,OAAOZ,EAAeY,EAAGlB,IACjCqB,UAAW,SAACH,GAAD,OAAOZ,EAAeY,EAAGlB,MAzBpC,2BAAOO,UAAWC,IAAQc,QAC1B,2BAAOvD,KAAK,aACZ,0BACEwD,QAASrB,EACTK,UAAWM,IACXL,IAAQgB,eACR1B,GAAWU,IAAQ3C,SAGrB,0BAAM0C,UAAWC,IAAQiB,KAAMrF,GAAIA,GAChCgC,GAEH,4BAAQmC,UAAWC,IAAQkB,UAAWH,QAASpB,IAC/C,4BAAQI,UAAWC,IAAQmB,gBCvBtBC,EARG,SAAA7D,GAChB,IAAM8D,EAAWC,cACjB,OAAOC,uBAAY,eAAC/D,EAAD,uDAAW,GAAX,OAAkB6D,EAAS,CAAC9D,OAAMC,cAAW,CAC9D6D,EACA9D,KCkEWiE,EAhEO,SAAC,GAIhB,IAHL5F,EAGI,EAHJA,GACA0D,EAEI,EAFJA,QACA1B,EACI,EADJA,KACI,EAC4B6D,oBAAS,GADrC,mBACGlC,EADH,KACamC,EADb,OAE2CD,mBAAS,IAFpD,mBAEGjC,EAFH,KAEmBmC,EAFnB,KAGEC,EAAcR,ENfY,iBMgB1BS,EAAiBT,ENfE,eMgBnBU,EAAcV,ENbO,iBMcrB3B,EAAkBsC,iBAAO,MAazBlC,EAAkB0B,uBAAY,SAACf,GACnCmB,EAAqBnB,KACpB,CAACmB,IAEEK,EAAe,SAACxB,GACpBsB,EAAY,CAAClG,GAAIA,EAAIyB,MAAOiC,EAAShC,MAAOkD,IAC9B,KAAVA,GACFqB,EAAejG,GAEjB8F,GAAY,IAed,OACE,kBAAC,EAAD,CACEpC,QAAWA,EACX1D,GAAMA,EACNgC,KAAQA,EACR2B,SAAUA,EACVC,eAAgBA,EAChBC,gBAAiBA,EACjBC,UA5Cc,WAChBkC,EAAY,CAAChG,GAAIA,EAAIyB,OAAQiC,EAAShC,MAAOM,KA4C3C+B,WA1Ce,WACjBkC,EAAejG,IA0CbgE,gBAvCoB,WACtB8B,GAAY,GACZC,EAAqB/D,IAsCnBiC,gBAAkBA,EAClBC,eAvBmB,SAACmC,EAAOzB,GACX,UAAdyB,EAAMC,IACRF,EAAaxB,GACJyB,EAAMtB,gBAAkBlB,EAAgB0C,SAAYF,EAAMC,IAE5C,WAAdD,EAAMC,KACfF,EAAapE,GAFboE,EAAaxB,OClBJ4B,EAxBE,WAAO,IAAD,EACU/D,EAAYM,GADtB,mBACd0D,EADc,KACChG,EADD,KAEfuB,EAAOyE,EAAc5E,KAAI,SAACmB,GAC9B,OACE,kBAAC,EAAD,CACEsD,IAAKtD,EACLhD,GAAIgD,EACJU,QAASjD,EAAMuC,GAAGvB,MAClBO,KAAMvB,EAAMuC,GAAGtB,WAMrB,OACE,6BAASyC,UAAWC,IAAQsC,MAC1B,wBAAIvC,UAAWC,IAAQuC,UACpB3E,K,iBCUOyB,kBA9BY,SAAC,GAMtB,IALLmD,EAKI,EALJA,QACAC,EAII,EAJJA,YACAC,EAGI,EAHJA,UACAlC,EAEI,EAFJA,MACAmC,EACI,EADJA,cAEA,OACE,yBAAK5C,UAAWC,IAAQ4C,QACtB,2BACEnC,SAAUgC,EACVI,WAAYJ,EACZrC,WAAS,EACTL,UAAWC,IAAQ8C,WACnBtC,MAAOA,EACPuC,YAAY,2BAEbP,GACD,4BACEzB,QAAS2B,EACT3C,UAAWM,IACTL,IAAQgD,WACPL,GAAiB3C,IAAQO,c,oBCarB0C,GA/BuB,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,WAChCC,EAAe9E,EAAYY,GAC3BmE,EAAUhC,ETVM,YSWhBiC,EAAmBjC,ETRI,mBSKyB,EAI3BK,mBAAS,IAJkB,mBAI/CjB,EAJ+C,KAIxC8C,EAJwC,KAMhDb,EAAclB,uBAAY,SAAAb,GAC9B4C,EAAU5C,EAAEC,cAAcH,OACZ,UAAVE,EAAEwB,KAAmBxB,EAAEC,cAAcH,MAAM+C,SAC7CH,EAAQ,CAACxH,GAAI4H,OAAUlG,MAAOoD,EAAEC,cAAcH,QAC9C8C,EAAU,OAEX,CAACA,EAAWF,IAOf,OACE,kBAAC,EAAD,CACEZ,QAAWU,EACXR,UAPc,WACdW,EAAiBF,IAOjBR,cAAiBQ,EACjB3C,MAASA,EACTiC,YAAeA,K,mBCyBNgB,GAnDA,SAAC,GAKT,IAJLC,EAII,EAJJA,UACAC,EAGI,EAHJA,mBACA7G,EAEI,EAFJA,OACA8G,EACI,EADJA,YAEMV,EAAa7E,YAAYQ,GAC/B,OACE,yBAAKkB,UAAWC,KAAQ6D,YACxB,0BAAM9D,UAAWC,KAAQ8D,WAC1B,gCAASJ,GADR,aAII,wBAAI3D,UAAWC,KAAQ+D,SACrB,4BACE,uBAAGC,KAAK,QACNjE,UAAWM,IACTL,KAAQiE,YACG,QAAXnH,GAAoBkD,KAAQO,QAE9BQ,QAAS,SAACL,GAAD,OAAOkD,EAAYlD,EAAEC,cAAcuD,aAL9C,QAOF,4BACE,uBAAGF,KAAK,WACNjE,UAAWM,IACTL,KAAQiE,YACG,WAAXnH,GAAuBkD,KAAQO,QAEjCQ,QAAS,SAACL,GAAD,OAAOkD,EAAYlD,EAAEC,cAAcuD,aAL9C,WAOF,4BACE,uBAAGF,KAAK,cACNjE,UAAWM,IACTL,KAAQiE,YACG,cAAXnH,GAA0BkD,KAAQO,QAEpCQ,QAAS,SAACL,GAAD,OAAOkD,EAAYlD,EAAEC,cAAcuD,aAL9C,eAQJ,4BACEnE,UAAWM,IACTL,KAAQmE,MACRT,EAAYR,GAAclD,KAAQO,QAEpCQ,QAAS,WAAO4C,MALlB,qBCPOS,GAzBS,WACtB,IAAMV,EAAYrF,EAAYe,GACxBtC,EAASuB,EAAYI,GACrB4F,EAAsBjD,EXbK,uBWc3BwC,EAAcxC,EXZO,gBWuB3B,OACE,kBAAC,GAAD,CACEsC,UAAWA,EACXC,mBARuB,WACzBU,KAQEvH,OAAQA,EACR8G,YAdkB,SAACU,GACrBV,EAAYU,OCEDC,GAdE,WACf,IAAM/B,EAAUnE,EAAYU,GAC5B,OACE,kBAAC,WAAD,KACE,4BAAQgB,UAAWC,IAAQwE,YAA3B,SACA,yBAAKzE,UAAWC,IAAQyE,MACtB,kBAAC,GAAD,CAA+BvB,WAAcV,IAC7C,kBAAC,EAAD,MACCA,GAAW,kBAAC,GAAD,SCFpBkC,IAASC,OACP,kBAAC,IAAD,CAAU9G,MAAOA,GACf,mBATgB,WAClB,OACE,kBAAC,GAAD,QAOA,OACW+G,SAASC,eAAe,W","file":"static/js/main.c3ca89b1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dataFooter\":\"Footer_dataFooter__22-Se\",\"todoCount\":\"Footer_todoCount__1PuTS\",\"filters\":\"Footer_filters__3dO_E\",\"clear\":\"Footer_clear__3veQd\",\"active\":\"Footer_active__EeWba\",\"filterBtnJs\":\"Footer_filterBtnJs__2EB7K\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"FieldCreatingNewTasks_header__1NmQW\",\"todosInput\":\"FieldCreatingNewTasks_todosInput__2t_Zs\",\"toggleAll\":\"FieldCreatingNewTasks_toggleAll__ks75C\",\"active\":\"FieldCreatingNewTasks_active__2-Sbv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"headerText\":\"TodoList_headerText__2jkBW\",\"todo\":\"TodoList_todo__1CS5R\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"TaskList_main__1SuYp\",\"todoList\":\"TaskList_todoList__2mKL_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Task_item__JiYci\",\"removeBtn\":\"Task_removeBtn__1sz5U\",\"toggle\":\"Task_toggle__3fEH1\",\"redactor\":\"Task_redactor__1I0yX\",\"taskText\":\"Task_taskText__3Uucy\",\"checkboxCustom\":\"Task_checkboxCustom__3Iipx\",\"text\":\"Task_text__1RRNW\",\"check\":\"Task_check__1LVuI\",\"edit\":\"Task_edit__10Fv9\",\"active\":\"Task_active__31Jxc\"};","export const getStorage = (prop, valueDefault = {}) => {\r\n  if (localStorage.getItem(prop)) {\r\n    return JSON.parse(localStorage.getItem(prop));\r\n  }\r\n  return valueDefault;\r\n};\r\n\r\n","export const removePropFromObject = (obj, id) => {\r\n  let res = {...obj};\r\n  delete res[id];\r\n  return res;\r\n};","export const removeArrayElement = (obj, id) => {\r\n  const index = obj.indexOf(id);\r\n  obj.splice(index, 1);\r\n  return obj;\r\n};","export default original => JSON.parse(JSON.stringify(original));","import { getStorage } from '../../utils/localStorage';\r\nimport {\r\n  ADD_TASK,\r\n  CHANGE_TASK_STATUS,\r\n  END_EDIT_TASK,\r\n  FILTER_TASKS,\r\n  REMOVE_SELECT_TASKS,\r\n  REMOVE_TASK,\r\n  SELECT_ALL_TASK\r\n} from './actions';\r\nimport {\r\n  normalize,\r\n  schema\r\n} from 'normalizr';\r\nimport { removePropFromObject } from '../../utils/removePropFromObject';\r\nimport { removeArrayElement } from '../../utils/removeArrayElement';\r\nimport  deepCopy  from '../../utils/deepCopy';\r\n\r\nlet initialState = {\r\n  tasks: getStorage('todo'),\r\n};\r\n\r\nconst tasksScheme = new schema.Entity('tasks');\r\nconst myTasks = {tasks: [tasksScheme]};\r\nconst dataNormalized = normalize(initialState, myTasks);\r\ninitialState = {\r\n  tasks: {\r\n    entities: dataNormalized.entities.tasks || {},\r\n    ids: dataNormalized.result.tasks || []\r\n  },\r\n  filter: getStorage('filter', 'All'),\r\n};\r\n\r\n\r\nconst taskReducer = (state = initialState, action) => {\r\n  let entities = {...state.tasks.entities};\r\n  let copyIds = [...state.tasks.ids];\r\n  const tasksCopy = deepCopy(state.tasks);\r\n  let {id, check, title} = {};\r\n  switch (action.type) {\r\n    \r\n    \r\n    case ADD_TASK:\r\n      ({id, title} = action.payload);\r\n      tasksCopy.entities[id] = {id, check: false, title};\r\n      tasksCopy.ids = [...tasksCopy.ids, id];\r\n      return {\r\n        ...state,\r\n        tasks: tasksCopy\r\n      };\r\n      \r\n      \r\n    case CHANGE_TASK_STATUS:\r\n      ({id, check, title} = action.payload);\r\n      tasksCopy.entities[id] = {id, check, title};\r\n      return {\r\n        ...state,\r\n        tasks: tasksCopy\r\n      };\r\n      \r\n      \r\n    case REMOVE_TASK:\r\n      return {\r\n        ...state,\r\n        tasks: {\r\n          ...state.tasks,\r\n          entities: removePropFromObject(entities, action.payload),\r\n          ids: removeArrayElement(copyIds, action.payload)\r\n        }\r\n      };\r\n      \r\n      \r\n    case REMOVE_SELECT_TASKS:\r\n      state.tasks.ids.map(id => {\r\n        if (entities[id].check) {\r\n          delete entities[id];\r\n          copyIds = removeArrayElement(copyIds, id);\r\n        }\r\n      });\r\n      return {\r\n        ...state,\r\n        tasks: {\r\n          entities,\r\n          ids: copyIds\r\n        }\r\n      };\r\n      \r\n      \r\n    case SELECT_ALL_TASK:\r\n      copyIds.map(id => entities[id].check = action.payload);\r\n      return {\r\n        ...state,\r\n        tasks: {\r\n          entities,\r\n          ids: copyIds\r\n        }\r\n      };\r\n      \r\n      \r\n    case END_EDIT_TASK:\r\n      ({id, check, title} = action.payload);\r\n      tasksCopy.entities[id] = {id, check, title};\r\n      return {\r\n        ...state,\r\n        tasks: tasksCopy\r\n      };\r\n      \r\n      \r\n    case FILTER_TASKS:\r\n      return {\r\n        ...state,\r\n        filter: action.payload\r\n      };\r\n      \r\n      \r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n\r\nexport default taskReducer;","export const ADD_TASK = 'ADD_TASK';\r\nexport const CHANGE_TASK_STATUS = 'CHANGE__CHECK';\r\nexport const REMOVE_TASK = 'REMOVE_TASK';\r\nexport const SELECT_ALL_TASK = 'SELECT_ALL_TASK';\r\nexport const REMOVE_SELECT_TASKS = 'REMOVE_SELECT_TASKS';\r\nexport const END_EDIT_TASK = 'END_EDIT_TASK';\r\nexport const FILTER_TASKS =  'FILTER_TASKS';\r\n","import { combineReducers, createStore } from 'redux';\r\nimport taskReducer from '../models/todo/reducers';\r\nimport { devToolsEnhancer } from 'redux-devtools-extension';\r\n\r\n\r\nconst reducer = combineReducers(\r\n  {\r\n    task: taskReducer\r\n  }\r\n);\r\n\r\nconst store = createStore(reducer, /* preloadedState, */ devToolsEnhancer(\r\n  // Specify name here, actionsBlacklist, actionsCreators and other options if needed\r\n));\r\n\r\nstore.subscribe(() => {\r\n  localStorage.setItem('todo', JSON.stringify(store.getState().task.tasks.entities));\r\n  localStorage.setItem('filter', JSON.stringify(store.getState().task.filter));\r\n});\r\n\r\nexport default store;","import { useSelector } from 'react-redux';\r\n\r\nexport default (func, params = {}) => useSelector(state => func(state, params));","import { createSelector } from 'reselect';\r\n\r\nconst getTasks = (state) => {\r\n  return state.task.tasks.entities;\r\n};\r\n\r\n\r\nconst getIds = (state) => {\r\n  return state.task.tasks.ids;\r\n};\r\n\r\n\r\nconst getFilterValue = (state) => {\r\n  return state.task.filter;\r\n};\r\n\r\n\r\nexport const getFilterValueReselect = createSelector([getFilterValue], (filter) => filter);\r\n\r\n\r\nexport const getFilteredTasksReselect = createSelector([getIds, getFilterValue, getTasks], (ids, type, tasks) => {\r\n  switch (type) {\r\n    case 'All':\r\n      return [ids.filter(t => tasks[t]), tasks];\r\n    case 'Active':\r\n      return [ids.filter(t => !tasks[t].check), tasks];\r\n    case 'Completed':\r\n      return [ids.filter(t => tasks[t].check), tasks];\r\n    default:\r\n      return [ids.filter(t => tasks[t]), tasks];\r\n  }\r\n});\r\n\r\n\r\nexport const getTasksCountReselect = createSelector([getIds], (ids) => ids.length);\r\n\r\n\r\nexport const isTasksReselect = createSelector([getTasksCountReselect], (ids) => Boolean(ids));\r\n\r\n\r\nexport const isAllSelectedReselect = createSelector([getTasks, getIds], (entities, ids) => {\r\n  return ids.some(el => !entities[el].check);\r\n});\r\n\r\n\r\nexport const getLeftTasksReselect = createSelector([getTasks, getIds], (entities, ids) => {\r\n  return ids.filter(t => !entities[t].check).length;\r\n});","import React, { memo } from 'react';\r\nimport classes from './Task.module.css';\r\nimport classnames from 'classnames';\r\n\r\nconst Task = ({\r\n  isCheck,\r\n  id,\r\n  task,\r\n  editMode,\r\n  cacheValueTask,\r\n  currentEditTask,\r\n  changeBox,\r\n  removeTask,\r\n  startChangeTask,\r\n  changeValueTask,\r\n  stopChangeTask\r\n}) => {\r\n  \r\n  return (\r\n    <li className={classes.item} onDoubleClick={startChangeTask}>\r\n      {!editMode\r\n        ? <label className={classes.toggle}>\r\n          <input type=\"checkbox\"/>\r\n          <span\r\n            onClick={changeBox}\r\n            className={classnames(\r\n            classes.checkboxCustom,\r\n            isCheck && classes.check\r\n          )}\r\n          />\r\n          <span className={classes.text} id={id}>\r\n            {task}\r\n          </span>\r\n          <button className={classes.removeBtn} onClick={removeTask} />\r\n          <button className={classes.taskText} />\r\n      </label>\r\n        : <input\r\n          ref={currentEditTask}\r\n          autoFocus\r\n          className={classnames(\r\n            classes.edit,\r\n            editMode && classes.active\r\n          )}\r\n          value={cacheValueTask}\r\n          onChange={(e) => changeValueTask(e.currentTarget.value)}\r\n          onBlur={(e) => stopChangeTask(e, cacheValueTask)}\r\n          onKeyDown={(e) => stopChangeTask(e, cacheValueTask)}\r\n        />\r\n      }\r\n    </li>\r\n  )\r\n};\r\n\r\nexport default memo(Task);","import { useCallback } from 'react';\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nconst useAction = type => {\r\n  const dispatch = useDispatch();\r\n  return useCallback((payload = {}) => dispatch({type, payload}), [\r\n    dispatch,\r\n    type\r\n  ]);\r\n};\r\n\r\nexport default useAction;\r\n\r\n","import React, { useState, useCallback, useRef } from 'react';\r\nimport Task from './Task';\r\nimport useAction from '../../../hooks/useAction';\r\nimport {\r\n  CHANGE_TASK_STATUS,\r\n  END_EDIT_TASK,\r\n  REMOVE_TASK\r\n} from '../../../models/todo/actions';\r\n\r\nconst TaskContainer = ({\r\n  id,\r\n  isCheck,\r\n  task,\r\n}) => {\r\n  const [editMode, setEditMode] = useState(false);\r\n  const [cacheValueTask, changeCacheValueTask] = useState('');\r\n  const changeCheck = useAction(CHANGE_TASK_STATUS);\r\n  const removeTaskHook = useAction(REMOVE_TASK);\r\n  const endEditTask = useAction(END_EDIT_TASK);\r\n  const currentEditTask = useRef(null);\r\n  const changeBox = () => {\r\n    changeCheck({id: id, check: !isCheck, title: task});\r\n  };\r\n  const removeTask = () => {\r\n    removeTaskHook(id);\r\n  };\r\n\r\n  const startChangeTask = () => {\r\n    setEditMode(true);\r\n    changeCacheValueTask(task);\r\n  };\r\n\r\n  const changeValueTask = useCallback((value) => {\r\n    changeCacheValueTask(value);\r\n  }, [changeCacheValueTask]);\r\n\r\n  const stopEditTask = (value) => {\r\n    endEditTask({id: id, check: isCheck, title: value});\r\n    if (value === '') {\r\n      removeTaskHook(id);\r\n    }\r\n    setEditMode(false);\r\n  };\r\n\r\n\r\n  const stopChangeTask = (event, value) => {\r\n    if (event.key === 'Enter') {\r\n      stopEditTask(value);\r\n    } else if (event.currentTarget === currentEditTask.current && !event.key) {\r\n      stopEditTask(value);\r\n    } else if (event.key === 'Escape') {\r\n      stopEditTask(task);\r\n    }\r\n  };\r\n\r\n\r\n  return (\r\n    <Task\r\n      isCheck = {isCheck}\r\n      id = {id}\r\n      task = {task}\r\n      editMode={editMode}\r\n      cacheValueTask={cacheValueTask}\r\n      currentEditTask={currentEditTask}\r\n      changeBox={changeBox}\r\n      removeTask={removeTask}\r\n      startChangeTask={startChangeTask}\r\n      changeValueTask={(changeValueTask)}\r\n      stopChangeTask={stopChangeTask}\r\n    />\r\n  )\r\n};\r\n\r\nexport default TaskContainer;","import React  from 'react';\r\nimport classes from './TaskList.module.css';\r\nimport useSelector from '../../hooks/useSelector';\r\nimport { getFilteredTasksReselect } from '../../models/todo/selectors';\r\nimport TaskContainer from './Task/TaskContainer';\r\n\r\n\r\nconst TaskList = () => {\r\n  const [filteredTasks, tasks] = useSelector(getFilteredTasksReselect);\r\n  const task = filteredTasks.map((t) => {\r\n    return (\r\n      <TaskContainer\r\n        key={t}\r\n        id={t}\r\n        isCheck={tasks[t].check}\r\n        task={tasks[t].title}\r\n      />\r\n    );\r\n  });\r\n  \r\n  \r\n  return (\r\n    <section className={classes.main}>\r\n      <ul className={classes.todoList}>\r\n        {task}\r\n      </ul>\r\n    </section>\r\n  )\r\n};\r\n\r\n\r\nexport default TaskList;","import React, { memo } from 'react';\r\nimport classes from './FieldCreatingNewTasks.module.css';\r\nimport classnames from 'classnames';\r\n\r\nconst FieldCreatingNewTask =({\r\n  isTasks,\r\n  changeValue,\r\n  selectAll,\r\n  value,\r\n  isAllSelected\r\n}) => {\r\n  return (\r\n    <div className={classes.header}>\r\n      <input\r\n        onChange={changeValue}\r\n        onKeyPress={changeValue}\r\n        autoFocus\r\n        className={classes.todosInput}\r\n        value={value}\r\n        placeholder=\"What needs to be done?\"\r\n      />\r\n      {isTasks &&\r\n      <button\r\n        onClick={selectAll}\r\n        className={classnames(\r\n          classes.toggleAll,\r\n          !isAllSelected && classes.active\r\n        )}\r\n      />}\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport default  memo(FieldCreatingNewTask);","import React, { useState, useCallback } from 'react';\r\nimport FieldCreatingNewTask from './FieldCreatingNewTasks';\r\nimport nanoid from 'nanoid';\r\nimport useSelector from '../../hooks/useSelector';\r\nimport { isAllSelectedReselect } from '../../models/todo/selectors';\r\nimport useAction from '../../hooks/useAction';\r\nimport { ADD_TASK, SELECT_ALL_TASK } from '../../models/todo/actions';\r\n\r\nconst FieldCreatingNewTaskContainer = ({countTasks}) => {\r\n  const allSelected =  useSelector(isAllSelectedReselect);\r\n  const addTask = useAction(ADD_TASK);\r\n  const selectedAllTasks = useAction(SELECT_ALL_TASK);\r\n  const [value, editValue] = useState('');\r\n\r\n  const changeValue = useCallback(e => {\r\n    editValue(e.currentTarget.value);\r\n    if (e.key === 'Enter' && e.currentTarget.value.trim()) {\r\n      addTask({id: nanoid(), title: e.currentTarget.value});\r\n      editValue('');\r\n    }\r\n  }, [editValue, addTask]);\r\n  \r\n\r\n  const selectAll = () => {\r\n      selectedAllTasks(allSelected);\r\n  };\r\n\r\n  return (\r\n    <FieldCreatingNewTask\r\n      isTasks = {countTasks}\r\n      selectAll = {selectAll}\r\n      isAllSelected = {allSelected}\r\n      value = {value}\r\n      changeValue = {changeValue}\r\n    />\r\n  )\r\n};\r\n\r\n\r\nexport default FieldCreatingNewTaskContainer;","import React from 'react';\r\nimport classes from './Footer.module.css';\r\nimport classnames from 'classnames';\r\nimport { useSelector } from 'react-redux';\r\nimport { getTasksCountReselect } from '../../models/todo/selectors';\r\n\r\n\r\nconst Footer = ({\r\n  leftTasks,\r\n  removeSelectedTask,\r\n  filter,\r\n  filterTasks\r\n}) => {\r\n  const countTasks = useSelector(getTasksCountReselect);\r\n  return (\r\n    <div className={classes.dataFooter}>\r\n\t\t  <span className={classes.todoCount}>\r\n\t\t\t<strong>{leftTasks}</strong>\r\n\t\t\t  item left\r\n\t\t  </span>\r\n        <ul className={classes.filters}>\r\n          <li>\r\n            <a href=\"#/All\"\r\n              className={classnames(\r\n                classes.filterBtnJs,\r\n                filter === 'All' && classes.active\r\n              )}\r\n              onClick={(e) => filterTasks(e.currentTarget.innerText)}>All</a>\r\n          </li>\r\n          <li>\r\n            <a href=\"#/Active\"\r\n              className={classnames(\r\n                classes.filterBtnJs,\r\n                filter === 'Active' && classes.active\r\n              )}\r\n              onClick={(e) => filterTasks(e.currentTarget.innerText)}>Active</a>\r\n          </li>\r\n          <li>\r\n            <a href=\"#/Completed\"\r\n              className={classnames(\r\n                classes.filterBtnJs,\r\n                filter === 'Completed' && classes.active\r\n              )}\r\n              onClick={(e) => filterTasks(e.currentTarget.innerText)}>Completed</a>\r\n          </li>\r\n        </ul>\r\n        <button\r\n          className={classnames(\r\n            classes.clear,\r\n            leftTasks < countTasks && classes.active\r\n          )}\r\n          onClick={() => {removeSelectedTask()}}>\r\n          Clear completed\r\n        </button>\r\n      </div>\r\n    )\r\n};\r\n\r\nexport default Footer;","import React from 'react';\r\nimport Footer from './Footer';\r\nimport useSelector from '../../hooks/useSelector';\r\nimport {\r\n  getFilterValueReselect,\r\n  getLeftTasksReselect,\r\n} from '../../models/todo/selectors';\r\nimport useAction from '../../hooks/useAction';\r\nimport {\r\n  FILTER_TASKS,\r\n  REMOVE_SELECT_TASKS\r\n} from '../../models/todo/actions';\r\n\r\n\r\nconst FooterContainer = () => {\r\n  const leftTasks = useSelector(getLeftTasksReselect);\r\n  const filter = useSelector(getFilterValueReselect);\r\n  const removeSelectedTasks = useAction(REMOVE_SELECT_TASKS);\r\n  const filterTasks = useAction(FILTER_TASKS);\r\n  \r\n  const filteredTasks = (method) => {\r\n    filterTasks(method);\r\n  };\r\n  \r\n  const removeSelectedTask = () => {\r\n    removeSelectedTasks();\r\n  };\r\n  \r\n  \r\n  return (\r\n    <Footer\r\n      leftTasks={leftTasks}\r\n      removeSelectedTask={removeSelectedTask}\r\n      filter={filter}\r\n      filterTasks={filteredTasks}\r\n    />\r\n  )\r\n};\r\n\r\nexport default FooterContainer;","import React, { Fragment } from 'react';\r\nimport classes from './../../TodoList.module.css';\r\nimport TaskList from '../taskList/TaskList';\r\nimport FieldCreatingNewTaskContainer from '../fieldCreatingNewTasks/FieldCreatingNewTasksContainer';\r\nimport FooterContainer from '../footer/FooterContainer';\r\nimport useSelector from '../../hooks/useSelector';\r\nimport { isTasksReselect } from '../../models/todo/selectors';\r\n\r\n\r\nconst TodoList = () => {\r\n  const isTasks = useSelector(isTasksReselect);\r\n  return (\r\n    <Fragment>\r\n      <header className={classes.headerText}>todos</header>\r\n      <div className={classes.todo}>\r\n        <FieldCreatingNewTaskContainer countTasks = {isTasks} />\r\n        <TaskList />\r\n        {isTasks && <FooterContainer />}\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default TodoList;\r\n","import React  from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport store from './state/Store';\nimport { Provider } from 'react-redux';\nimport TodoList from './components/todoList/TodoList';\n\n\nconst TodoListApp = () => {\n  return (\n    <TodoList />\n  );\n};\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <TodoListApp />\n  </Provider>, document.getElementById('root'));\n\n"],"sourceRoot":""}