{"version":3,"sources":["components/footer/Footer.module.css","components/fieldCreatingNewTasks/FieldCreatingNewTasks.module.css","TodoList.module.css","components/taskList/TaskList.module.css","utils/localStorage.js","utils/removePropFromObject.js","utils/removeArrayElement.js","utils/deepCopy.js","models/todo/reducers.js","models/todo/actions.js","state/Store.js","hooks/useSelector.js","models/todo/selectors.js","components/taskList/Task/Task.jsx","hooks/useAction.js","components/taskList/Task/TaskContainer.jsx","components/taskList/TaskList.jsx","components/fieldCreatingNewTasks/FieldCreatingNewTasks.jsx","components/fieldCreatingNewTasks/FieldCreatingNewTasksContainer.jsx","components/footer/Footer.jsx","components/footer/FooterContainer.jsx","components/todoList/TodoList.jsx","index.js","components/taskList/Task/Task.module.css"],"names":["module","exports","getStorage","prop","valueDefault","localStorage","getItem","JSON","parse","removePropFromObject","obj","id","res","removeArrayElement","index","indexOf","splice","original","stringify","initialState","tasks","myTasks","schema","Entity","dataNormalized","normalize","entities","ids","result","filter","taskReducer","state","action","type","payload","check","title","tasksCopy","deepCopy","copyIds","map","reducer","combineReducers","task","store","createStore","devToolsEnhancer","subscribe","setItem","getState","func","params","useSelector","getTasks","getIds","getFilterValue","getFilterValueReselect","createSelector","getFilteredTasksReselect","t","getTasksCountReselect","length","isTasksReselect","Boolean","isAllSelectedReselect","some","el","getLeftTasksReselect","memo","isCheck","editMode","cacheValueTask","currentEditTask","changeBox","removeTask","startChangeTask","onChangeHandler","stopChangeTaskHandler","className","classes","item","onDoubleClick","ref","autoFocus","classnames","edit","active","value","onChange","onBlur","onKeyDown","toggle","onClick","checkboxCustom","text","removeBtn","useAction","dispatch","useDispatch","useCallback","TaskContainer","useState","setEditMode","changeCacheValueTask","changeCheck","removeTaskHook","endEditTask","useRef","e","currentTarget","stopEditTask","key","current","TaskList","filteredTasks","createTask","main","todoList","isTasks","changeValue","selectAll","isAllSelected","header","onKeyPress","todosInput","placeholder","toggleAll","FieldCreatingNewTaskContainer","countTasks","allSelected","addTask","selectedAllTasks","editValue","trim","nanoid","Footer","leftTasks","removeSelectedTask","filterTasks","dataFooter","todoCount","filters","href","filterBtnJs","clear","FooterContainer","removeSelectedTasks","innerText","TodoList","headerText","todo","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c3a5956c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dataFooter\":\"Footer_dataFooter__22-Se\",\"todoCount\":\"Footer_todoCount__1PuTS\",\"filters\":\"Footer_filters__3dO_E\",\"clear\":\"Footer_clear__3veQd\",\"active\":\"Footer_active__EeWba\",\"filterBtnJs\":\"Footer_filterBtnJs__2EB7K\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"FieldCreatingNewTasks_header__1NmQW\",\"todosInput\":\"FieldCreatingNewTasks_todosInput__2t_Zs\",\"toggleAll\":\"FieldCreatingNewTasks_toggleAll__ks75C\",\"active\":\"FieldCreatingNewTasks_active__2-Sbv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"headerText\":\"TodoList_headerText__2jkBW\",\"todo\":\"TodoList_todo__1CS5R\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"TaskList_main__1SuYp\",\"todoList\":\"TaskList_todoList__2mKL_\"};","export const getStorage = (prop, valueDefault = {}) => {\r\n  if (localStorage.getItem(prop)) {\r\n    return JSON.parse(localStorage.getItem(prop));\r\n  }\r\n  return valueDefault;\r\n};\r\n\r\n","export const removePropFromObject = (obj, id) => {\r\n  let res = {...obj};\r\n  delete res[id];\r\n  return res;\r\n};","export const removeArrayElement = (obj, id) => {\r\n  const index = obj.indexOf(id);\r\n  obj.splice(index, 1);\r\n  return obj;\r\n};","export default original => JSON.parse(JSON.stringify(original));","import { getStorage } from '../../utils/localStorage';\r\nimport {\r\n  ADD_TASK,\r\n  CHANGE_TASK_STATUS,\r\n  END_EDIT_TASK,\r\n  FILTER_TASKS,\r\n  REMOVE_SELECT_TASKS,\r\n  REMOVE_TASK,\r\n  SELECT_ALL_TASK\r\n} from './actions';\r\nimport {\r\n  normalize,\r\n  schema\r\n} from 'normalizr';\r\nimport { removePropFromObject } from '../../utils/removePropFromObject';\r\nimport { removeArrayElement } from '../../utils/removeArrayElement';\r\nimport  deepCopy  from '../../utils/deepCopy';\r\n\r\nlet initialState = {\r\n  tasks: getStorage('todo'),\r\n};\r\n\r\nconst tasksScheme = new schema.Entity('tasks');\r\nconst myTasks = {tasks: [tasksScheme]};\r\nconst dataNormalized = normalize(initialState, myTasks);\r\ninitialState = {\r\n  tasks: {\r\n    entities: dataNormalized.entities.tasks || {},\r\n    ids: dataNormalized.result.tasks || []\r\n  },\r\n  filter: getStorage('filter', 'All'),\r\n};\r\n\r\n\r\nconst taskReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n  \r\n  \r\n    case CHANGE_TASK_STATUS: {\r\n      const {id, check, title} = action.payload;\r\n      const tasksCopy = deepCopy(state.tasks);\r\n      tasksCopy.entities[id] = {id, check, title};\r\n      return {\r\n        ...state,\r\n        tasks: tasksCopy\r\n      };\r\n    }\r\n    \r\n    \r\n    case ADD_TASK: {\r\n      const {id, title} = action.payload;\r\n      const tasksCopy = deepCopy(state.tasks);\r\n      tasksCopy.entities[id] = {id, check: false, title};\r\n      tasksCopy.ids = [...tasksCopy.ids, id];\r\n      return {\r\n        ...state,\r\n        tasks: tasksCopy\r\n      };\r\n    }\r\n      \r\n    \r\n    case REMOVE_TASK: {\r\n      const entities = {...state.tasks.entities};\r\n      let copyIds = [...state.tasks.ids];\r\n      return {\r\n        ...state,\r\n        tasks: {\r\n          ...state.tasks,\r\n          entities: removePropFromObject(entities, action.payload),\r\n          ids: removeArrayElement(copyIds, action.payload)\r\n        }\r\n      };\r\n    }\r\n      \r\n      \r\n    case REMOVE_SELECT_TASKS: {\r\n      const entities = {...state.tasks.entities};\r\n      let copyIds = [...state.tasks.ids];\r\n      state.tasks.ids.map(id => {\r\n        if (entities[id].check) {\r\n          delete entities[id];\r\n          copyIds = removeArrayElement(copyIds, id);\r\n        }\r\n      });\r\n      return {\r\n        ...state,\r\n        tasks: {\r\n          entities,\r\n          ids: copyIds\r\n        }\r\n      };\r\n    }\r\n      \r\n      \r\n    case SELECT_ALL_TASK: {\r\n      const entities = {...state.tasks.entities};\r\n      let copyIds = [...state.tasks.ids];\r\n      copyIds.map(id => entities[id].check = action.payload);\r\n      return {\r\n        ...state,\r\n        tasks: {\r\n          entities,\r\n          ids: copyIds\r\n        }\r\n      };\r\n    }\r\n      \r\n      \r\n    case END_EDIT_TASK: {\r\n      const {id, check, title} = action.payload;\r\n      const tasksCopy = deepCopy(state.tasks);\r\n      tasksCopy.entities[id] = {id, check, title};\r\n      return {\r\n        ...state,\r\n        tasks: tasksCopy\r\n      };\r\n    }\r\n      \r\n    case FILTER_TASKS:\r\n      return {\r\n        ...state,\r\n        filter: action.payload\r\n      };\r\n      \r\n      \r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n\r\nexport default taskReducer;","export const ADD_TASK = 'ADD_TASK';\r\nexport const CHANGE_TASK_STATUS = 'CHANGE_TASK_STATUS';\r\nexport const REMOVE_TASK = 'REMOVE_TASK';\r\nexport const SELECT_ALL_TASK = 'SELECT_ALL_TASK';\r\nexport const REMOVE_SELECT_TASKS = 'REMOVE_SELECT_TASKS';\r\nexport const END_EDIT_TASK = 'END_EDIT_TASK';\r\nexport const FILTER_TASKS =  'FILTER_TASKS';\r\n","import { combineReducers, createStore } from 'redux';\r\nimport taskReducer from '../models/todo/reducers';\r\nimport { devToolsEnhancer } from 'redux-devtools-extension';\r\n\r\n\r\nconst reducer = combineReducers(\r\n  {\r\n    task: taskReducer\r\n  }\r\n);\r\n\r\nconst store = createStore(reducer, /* preloadedState, */ devToolsEnhancer(\r\n  // Specify name here, actionsBlacklist, actionsCreators and other options if needed\r\n));\r\n\r\nstore.subscribe(() => {\r\n  localStorage.setItem('todo', JSON.stringify(store.getState().task.tasks.entities));\r\n  localStorage.setItem('filter', JSON.stringify(store.getState().task.filter));\r\n});\r\n\r\nexport default store;","import { useSelector } from 'react-redux';\r\n\r\nexport default (func, params = {}) => useSelector(state => func(state, params));","import { createSelector } from 'reselect';\r\n\r\nconst getTasks = (state) => {\r\n  return state.task.tasks.entities;\r\n};\r\n\r\n\r\nconst getIds = (state) => {\r\n  return state.task.tasks.ids;\r\n};\r\n\r\n\r\nconst getFilterValue = (state) => {\r\n  return state.task.filter;\r\n};\r\n\r\n\r\nexport const getFilterValueReselect = createSelector([getFilterValue], (filter) => filter);\r\n\r\n\r\nexport const getFilteredTasksReselect = createSelector([getIds, getFilterValue, getTasks], (ids, type, tasks) => {\r\n  switch (type) {\r\n    case 'All':\r\n      return [ids.filter(t => tasks[t]), tasks];\r\n    case 'Active':\r\n      return [ids.filter(t => !tasks[t].check), tasks];\r\n    case 'Completed':\r\n      return [ids.filter(t => tasks[t].check), tasks];\r\n    default:\r\n      return [ids.filter(t => tasks[t]), tasks];\r\n  }\r\n});\r\n\r\n\r\nexport const getTasksCountReselect = createSelector([getIds], (ids) => ids.length);\r\n\r\n\r\nexport const isTasksReselect = createSelector([getTasksCountReselect], (ids) => Boolean(ids));\r\n\r\n\r\nexport const isAllSelectedReselect = createSelector([getTasks, getIds], (entities, ids) => {\r\n  return ids.some(el => !entities[el].check);\r\n});\r\n\r\n\r\nexport const getLeftTasksReselect = createSelector([getTasks, getIds], (entities, ids) => {\r\n  return ids.filter(t => !entities[t].check).length;\r\n});","import React, { memo } from 'react';\r\nimport classes from './Task.module.css';\r\nimport classnames from 'classnames';\r\n\r\nconst Task = ({\r\n  isCheck,\r\n  task,\r\n  editMode,\r\n  cacheValueTask,\r\n  currentEditTask,\r\n  changeBox,\r\n  removeTask,\r\n  startChangeTask,\r\n  onChangeHandler,\r\n  stopChangeTaskHandler\r\n}) => (\r\n  <li className={classes.item} onDoubleClick={startChangeTask}>\r\n    {!editMode\r\n      ? <label className={classes.toggle}>\r\n        <input type=\"checkbox\" />\r\n        <span\r\n          onClick={changeBox}\r\n          className={classnames(\r\n            classes.checkboxCustom,\r\n            isCheck && classes.check\r\n          )}\r\n        />\r\n        <span className={classes.text}>\r\n          {task}\r\n        </span>\r\n        <button className={classes.removeBtn} onClick={removeTask} />\r\n      </label>\r\n      : <input\r\n        ref={currentEditTask}\r\n        autoFocus\r\n        className={classnames(\r\n          classes.edit,\r\n          editMode && classes.active\r\n        )}\r\n        value={cacheValueTask}\r\n        onChange={onChangeHandler}\r\n        onBlur={stopChangeTaskHandler}\r\n        onKeyDown={stopChangeTaskHandler}\r\n      />\r\n    }\r\n  </li>\r\n);\r\n\r\nexport default memo(Task);","import { useCallback } from 'react';\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nconst useAction = type => {\r\n  const dispatch = useDispatch();\r\n  return useCallback((payload = {}) => dispatch({type, payload}), [\r\n    dispatch,\r\n    type\r\n  ]);\r\n};\r\n\r\nexport default useAction;\r\n\r\n","import React, { useState, useCallback, useRef } from 'react';\r\nimport Task from './Task';\r\nimport useAction from '../../../hooks/useAction';\r\nimport {\r\n  CHANGE_TASK_STATUS,\r\n  END_EDIT_TASK,\r\n  REMOVE_TASK\r\n} from '../../../models/todo/actions';\r\n\r\nconst TaskContainer = ({\r\n  id,\r\n  isCheck,\r\n  task,\r\n}) => {\r\n  const [editMode, setEditMode] = useState(false);\r\n  const [cacheValueTask, changeCacheValueTask] = useState('');\r\n  const changeCheck = useAction(CHANGE_TASK_STATUS);\r\n  const removeTaskHook = useAction(REMOVE_TASK);\r\n  const endEditTask = useAction(END_EDIT_TASK);\r\n  const currentEditTask = useRef(null);\r\n  const changeBox = () => {\r\n    changeCheck({id: id, check: !isCheck, title: task});\r\n  };\r\n  const removeTask = () => {\r\n    removeTaskHook(id);\r\n  };\r\n\r\n  const startChangeTask = () => {\r\n    setEditMode(true);\r\n    changeCacheValueTask(task);\r\n  };\r\n\r\n  const onChangeHandler = useCallback((e) => {\r\n    changeCacheValueTask(e.currentTarget.value);\r\n  }, [changeCacheValueTask]);\r\n\r\n  const stopEditTask = (value) => {\r\n    endEditTask({id: id, check: isCheck, title: value});\r\n    if (value === '') {\r\n      removeTaskHook(id);\r\n    }\r\n    setEditMode(false);\r\n  };\r\n  \r\n\r\n  const stopChangeTaskHandler = useCallback((e) => {\r\n    if (e.key === 'Enter') {\r\n      stopEditTask(e.currentTarget.value);\r\n    } else if (e.currentTarget === currentEditTask.current && !e.key) {\r\n      stopEditTask(e.currentTarget.value);\r\n    } else if (e.key === 'Escape') {\r\n      stopEditTask(task);\r\n    }\r\n  }, []);\r\n\r\n\r\n  return (\r\n    <Task\r\n      isCheck = {isCheck}\r\n      task = {task}\r\n      editMode={editMode}\r\n      cacheValueTask={cacheValueTask}\r\n      currentEditTask={currentEditTask}\r\n      changeBox={changeBox}\r\n      removeTask={removeTask}\r\n      startChangeTask={startChangeTask}\r\n      onChangeHandler={onChangeHandler}\r\n      stopChangeTaskHandler={stopChangeTaskHandler}\r\n    />\r\n  )\r\n};\r\n\r\nexport default TaskContainer;","import React  from 'react';\r\nimport classes from './TaskList.module.css';\r\nimport useSelector from '../../hooks/useSelector';\r\nimport { getFilteredTasksReselect } from '../../models/todo/selectors';\r\nimport TaskContainer from './Task/TaskContainer';\r\n\r\n\r\nconst TaskList = () => {\r\n  const [filteredTasks, tasks] = useSelector(getFilteredTasksReselect);\r\n  const createTask = filteredTasks.map((t) => (\r\n      <TaskContainer\r\n        key={t}\r\n        id={t}\r\n        isCheck={tasks[t].check}\r\n        task={tasks[t].title}\r\n      />\r\n    )\r\n  );\r\n  \r\n  \r\n  return (\r\n    <section className={classes.main}>\r\n      <ul className={classes.todoList}>\r\n        {createTask}\r\n      </ul>\r\n    </section>\r\n  )\r\n};\r\n\r\n\r\nexport default TaskList;","import React, { memo } from 'react';\r\nimport classes from './FieldCreatingNewTasks.module.css';\r\nimport classnames from 'classnames';\r\n\r\nconst FieldCreatingNewTask =({\r\n  isTasks,\r\n  changeValue,\r\n  selectAll,\r\n  value,\r\n  isAllSelected\r\n}) => (\r\n  <div className={classes.header}>\r\n    <input\r\n      onChange={changeValue}\r\n      onKeyPress={changeValue}\r\n      autoFocus\r\n      className={classes.todosInput}\r\n      value={value}\r\n      placeholder=\"What needs to be done?\"\r\n    />\r\n    {isTasks &&\r\n    <button\r\n      onClick={selectAll}\r\n      className={classnames(\r\n        classes.toggleAll,\r\n        !isAllSelected && classes.active\r\n      )}\r\n    />}\r\n  </div>\r\n);\r\n\r\n\r\nexport default  memo(FieldCreatingNewTask);","import React, { useState, useCallback } from 'react';\r\nimport FieldCreatingNewTask from './FieldCreatingNewTasks';\r\nimport nanoid from 'nanoid';\r\nimport useSelector from '../../hooks/useSelector';\r\nimport { isAllSelectedReselect } from '../../models/todo/selectors';\r\nimport useAction from '../../hooks/useAction';\r\nimport { ADD_TASK, SELECT_ALL_TASK } from '../../models/todo/actions';\r\n\r\nconst FieldCreatingNewTaskContainer = ({countTasks}) => {\r\n  const allSelected =  useSelector(isAllSelectedReselect);\r\n  const addTask = useAction(ADD_TASK);\r\n  const selectedAllTasks = useAction(SELECT_ALL_TASK);\r\n  const [value, editValue] = useState('');\r\n\r\n  const changeValue = useCallback(e => {\r\n    editValue(e.currentTarget.value);\r\n    if (e.key === 'Enter' && e.currentTarget.value.trim()) {\r\n      addTask({id: nanoid(), title: e.currentTarget.value});\r\n      editValue('');\r\n    }\r\n  }, [editValue, addTask]);\r\n  \r\n\r\n  const selectAll = () => {\r\n      selectedAllTasks(allSelected);\r\n  };\r\n\r\n  return (\r\n    <FieldCreatingNewTask\r\n      isTasks = {countTasks}\r\n      selectAll = {selectAll}\r\n      isAllSelected = {allSelected}\r\n      value = {value}\r\n      changeValue = {changeValue}\r\n    />\r\n  )\r\n};\r\n\r\n\r\nexport default FieldCreatingNewTaskContainer;","import React from 'react';\r\nimport classes from './Footer.module.css';\r\nimport classnames from 'classnames';\r\n\r\n\r\nconst Footer = ({\r\n  leftTasks,\r\n  removeSelectedTask,\r\n  filter,\r\n  filterTasks,\r\n  countTasks\r\n}) => (\r\n  <div className={classes.dataFooter}>\r\n\t\t  <span className={classes.todoCount}>\r\n\t\t\t<strong>{leftTasks}</strong>\r\n\t\t\t  item left\r\n\t\t  </span>\r\n    <ul className={classes.filters}>\r\n      <li>\r\n        <a href=\"#/All\"\r\n           className={classnames(\r\n             classes.filterBtnJs,\r\n             filter === 'All' && classes.active\r\n           )}\r\n           onClick={filterTasks}>All</a>\r\n      </li>\r\n      <li>\r\n        <a href=\"#/Active\"\r\n           className={classnames(\r\n             classes.filterBtnJs,\r\n             filter === 'Active' && classes.active\r\n           )}\r\n           onClick={filterTasks}>Active</a>\r\n      </li>\r\n      <li>\r\n        <a href=\"#/Completed\"\r\n           className={classnames(\r\n             classes.filterBtnJs,\r\n             filter === 'Completed' && classes.active\r\n           )}\r\n           onClick={filterTasks}>Completed</a>\r\n      </li>\r\n    </ul>\r\n    <button\r\n      className={classnames(\r\n        classes.clear,\r\n        leftTasks < countTasks && classes.active\r\n      )}\r\n      onClick={() => {\r\n        removeSelectedTask()\r\n      }}>\r\n      Clear completed\r\n    </button>\r\n  </div>\r\n);\r\n\r\nexport default Footer;","import React, { useCallback } from 'react';\r\nimport Footer from './Footer';\r\nimport useSelector from '../../hooks/useSelector';\r\nimport {\r\n  getFilterValueReselect,\r\n  getLeftTasksReselect, getTasksCountReselect,\r\n} from '../../models/todo/selectors';\r\nimport useAction from '../../hooks/useAction';\r\nimport {\r\n  FILTER_TASKS,\r\n  REMOVE_SELECT_TASKS\r\n} from '../../models/todo/actions';\r\n\r\n\r\nconst FooterContainer = () => {\r\n  const leftTasks = useSelector(getLeftTasksReselect);\r\n  const filter = useSelector(getFilterValueReselect);\r\n  const removeSelectedTasks = useAction(REMOVE_SELECT_TASKS);\r\n  const filterTasks = useAction(FILTER_TASKS);\r\n  const countTasks = useSelector(getTasksCountReselect);\r\n  \r\n  const filteredTasks = useCallback((e) => {\r\n    filterTasks(e.currentTarget.innerText);\r\n  }, []);\r\n  \r\n  const removeSelectedTask = () => {\r\n    removeSelectedTasks();\r\n  };\r\n  \r\n  \r\n  return (\r\n    <Footer\r\n      leftTasks={leftTasks}\r\n      removeSelectedTask={removeSelectedTask}\r\n      filter={filter}\r\n      filterTasks={filteredTasks}\r\n      countTasks = {countTasks}\r\n    />\r\n  )\r\n};\r\n\r\nexport default FooterContainer;","import React, { Fragment } from 'react';\r\nimport classes from './../../TodoList.module.css';\r\nimport TaskList from '../taskList/TaskList';\r\nimport FieldCreatingNewTaskContainer from '../fieldCreatingNewTasks/FieldCreatingNewTasksContainer';\r\nimport FooterContainer from '../footer/FooterContainer';\r\nimport useSelector from '../../hooks/useSelector';\r\nimport { isTasksReselect } from '../../models/todo/selectors';\r\n\r\n\r\nconst TodoList = () => {\r\n  const isTasks = useSelector(isTasksReselect);\r\n  return (\r\n    <Fragment>\r\n      <header className={classes.headerText}>todos</header>\r\n      <div className={classes.todo}>\r\n        <FieldCreatingNewTaskContainer countTasks = {isTasks} />\r\n        <TaskList />\r\n        {isTasks && <FooterContainer />}\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default TodoList;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport store from './state/Store';\nimport { Provider } from 'react-redux';\nimport TodoList from './components/todoList/TodoList';\n\n\nconst TodoListApp = () => (\n  <TodoList />\n);\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <TodoListApp/>\n  </Provider>, document.getElementById('root'));\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Task_item__JiYci\",\"removeBtn\":\"Task_removeBtn__1sz5U\",\"toggle\":\"Task_toggle__3fEH1\",\"redactor\":\"Task_redactor__1I0yX\",\"taskText\":\"Task_taskText__3Uucy\",\"checkboxCustom\":\"Task_checkboxCustom__3Iipx\",\"text\":\"Task_text__1RRNW\",\"check\":\"Task_check__1LVuI\",\"edit\":\"Task_edit__10Fv9\",\"active\":\"Task_active__31Jxc\"};"],"sourceRoot":""}