{"version":3,"sources":["components/footer/Footer.module.css","components/fieldCreatingNewTasks/FieldCreatingNewTasks.module.css","TodoList.module.css","components/taskList/TaskList.module.css","components/taskList/Task/Task.module.css","utils/localStorage.js","utils/removePropFromObject.js","utils/removeArrayElement.js","models/todo/reducers.js","models/todo/actions.js","state/Store.js","models/todo/selectors.js","hooks/useSelector.js","hooks/useAction.js","components/taskList/Task/Task.jsx","components/taskList/Task/TaskContainer.jsx","components/taskList/TaskList.jsx","components/fieldCreatingNewTasks/FieldCreatingNewTasks.jsx","components/fieldCreatingNewTasks/FieldCreatingNewTasksContainer.jsx","components/footer/Footer.jsx","components/footer/FooterContainer.jsx","components/todoList/TodoList.jsx","index.js"],"names":["module","exports","getStorage","prop","valueDefault","localStorage","getItem","JSON","parse","removePropFromObject","obj","id","res","removeArrayElement","index","indexOf","splice","initialState","tasks","myTasks","schema","Entity","dataNormalized","normalize","entities","ids","result","allSelected","leftTasks","filter","taskReducer","state","action","copyIds","setItem","stringify","type","payload","check","title","map","length","reducer","combineReducers","task","store","createStore","devToolsEnhancer","getTasksReselect","createSelector","getIds","getIdsReselect","getAllSelectedReselect","getLeftTasksReselect","getFilterValueReselect","getTasksCount","hasTasks","Boolean","func","params","useSelector","useAction","dispatch","useDispatch","useCallback","memo","isCheck","editMode","cacheValueTask","currentEditTask","changeBox","removeTask","startChangeTask","changeValueTask","stopChangeTask","className","classes","item","onDoubleClick","ref","autoFocus","classnames","edit","active","value","onChange","e","currentTarget","onBlur","onKeyDown","toggle","onClick","checkboxCustom","text","removeBtn","taskText","TaskContainer","useState","setEditMode","changeCacheValueTask","changeCheck","removeTaskHook","endEditTask","useRef","stopEditTask","event","key","current","TaskList","filteredTasks","t","getFilteredTasksReselect","main","todoList","isTasks","changeValue","selectAll","isAllSelected","header","onKeyPress","todosInput","placeholder","toggleAll","FieldCreatingNewTaskContainer","countTasks","addTask","selectedAllTasks","editValue","trim","nanoid","Footer","removeSelectedTask","filterTasks","dataFooter","todoCount","filters","href","filterBtnJs","innerText","clear","FooterContainer","removeSelectedTasks","method","TodoList","headerText","todo","ReactDOM","render","controllAllSelected","getCountLeftTasks","useEffect","count","document","getElementById"],"mappings":"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","file":"static/js/main.7a8c0c2a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dataFooter\":\"Footer_dataFooter__22-Se\",\"todoCount\":\"Footer_todoCount__1PuTS\",\"filters\":\"Footer_filters__3dO_E\",\"clear\":\"Footer_clear__3veQd\",\"active\":\"Footer_active__EeWba\",\"filterBtnJs\":\"Footer_filterBtnJs__2EB7K\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"FieldCreatingNewTasks_header__1NmQW\",\"todosInput\":\"FieldCreatingNewTasks_todosInput__2t_Zs\",\"toggleAll\":\"FieldCreatingNewTasks_toggleAll__ks75C\",\"active\":\"FieldCreatingNewTasks_active__2-Sbv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"headerText\":\"TodoList_headerText__2jkBW\",\"todo\":\"TodoList_todo__1CS5R\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"TaskList_main__1SuYp\",\"todoList\":\"TaskList_todoList__2mKL_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Task_item__JiYci\",\"removeBtn\":\"Task_removeBtn__1sz5U\",\"toggle\":\"Task_toggle__3fEH1\",\"redactor\":\"Task_redactor__1I0yX\",\"taskText\":\"Task_taskText__3Uucy\",\"checkboxCustom\":\"Task_checkboxCustom__3Iipx\",\"text\":\"Task_text__1RRNW\",\"check\":\"Task_check__1LVuI\",\"edit\":\"Task_edit__10Fv9\",\"active\":\"Task_active__31Jxc\"};","export const getStorage = (prop, valueDefault = []) => {\r\n  if (localStorage.getItem(prop)) {\r\n    return JSON.parse(localStorage.getItem(prop));\r\n  }\r\n  return valueDefault;\r\n};\r\n\r\n","export const removePropFromObject = (obj, id) => {\r\n  let res = {...obj};\r\n  delete res[id];\r\n  return res;\r\n};","export const removeArrayElement = (obj, id) => {\r\n  const index = obj.indexOf(id);\r\n  obj.splice(index, 1);\r\n  return obj;\r\n};","import { getStorage } from '../../utils/localStorage';\r\nimport {\r\n  ADD_TASK,\r\n  CHANGE_TASK_STATUS,\r\n  CONTROL_ALL_SELECTED, END_EDIT_TASK, FILTER_TASKS, LEFT_TASKS,\r\n  REMOVE_SELECT_TASKS,\r\n  REMOVE_TASK,\r\n  SELECT_ALL_TASK\r\n} from './actions';\r\nimport { normalize, schema } from 'normalizr';\r\nimport { removePropFromObject } from '../../utils/removePropFromObject';\r\nimport { removeArrayElement } from '../../utils/removeArrayElement';\r\n\r\nlet initialState = {\r\n  tasks: getStorage('todo'),\r\n};\r\n\r\nconst tasksScheme = new schema.Entity('tasks');\r\nconst myTasks = {tasks: [tasksScheme]};\r\nlet dataNormalized = normalize(initialState, myTasks);\r\ninitialState = {\r\n  tasks: {\r\n    entities: dataNormalized.entities.tasks || [],\r\n    ids: dataNormalized.result.tasks || []\r\n  },\r\n  allSelected: false,\r\n  leftTasks: 0,\r\n  filter: getStorage('filter', 'All'),\r\n};\r\n\r\n\r\nconst taskReducer = (state = initialState, action) => {\r\n  let entities = {...state.tasks.entities};\r\n  let copyIds = [...state.tasks.ids];\r\n  localStorage.setItem('todo', JSON.stringify(entities));\r\n  localStorage.setItem('filter', JSON.stringify(state.filter));\r\n  switch (action.type) {\r\n    case ADD_TASK:\r\n      return {\r\n        ...state,\r\n        tasks: {\r\n          ...state.tasks,\r\n          entities: {\r\n            ...state.tasks.entities,\r\n            [action.payload[0]]: {\r\n              id: action.payload[0],\r\n              check: false,\r\n              title: action.payload[1]\r\n            }\r\n          },\r\n          ids: [...state.tasks.ids, action.payload[0]]\r\n        }\r\n      };\r\n    case CHANGE_TASK_STATUS:\r\n      return {\r\n        ...state,\r\n        tasks: {\r\n          ...state.tasks,\r\n          entities: {\r\n            ...state.tasks.entities,\r\n            [action.payload[0]]: {\r\n              id: action.payload[0],\r\n              check: action.payload[1],\r\n              title: action.payload[2]\r\n            }\r\n          }\r\n        }\r\n      };\r\n    case REMOVE_TASK:\r\n      return {\r\n        ...state,\r\n        tasks: {\r\n          ...state.tasks,\r\n          entities: removePropFromObject(entities, action.payload),\r\n          ids: removeArrayElement(copyIds, action.payload)\r\n        }\r\n      };\r\n    case REMOVE_SELECT_TASKS:\r\n      state.tasks.ids.map(id => {\r\n        if (entities[id].check) {\r\n          delete entities[id];\r\n          copyIds = removeArrayElement(copyIds, id);\r\n        }\r\n      });\r\n      return {\r\n        ...state,\r\n        tasks: {\r\n          entities,\r\n          ids: copyIds\r\n        }\r\n      };\r\n    case SELECT_ALL_TASK:\r\n      copyIds.map(id => entities[id].check = !state.allSelected);\r\n      return {\r\n        ...state,\r\n        tasks: {\r\n          entities,\r\n          ids: copyIds\r\n        }\r\n      };\r\n    case CONTROL_ALL_SELECTED:\r\n      return {\r\n        ...state,\r\n        allSelected: !state.leftTasks && state.tasks.ids.length,\r\n      };\r\n    case LEFT_TASKS:\r\n      return {\r\n        ...state,\r\n        leftTasks: action.payload\r\n      };\r\n    case END_EDIT_TASK:\r\n      return {\r\n        ...state,\r\n        tasks: {\r\n          ...state.tasks,\r\n          entities: {\r\n            ...state.tasks.entities,\r\n            [action.payload[0]]:\r\n              {\r\n                id: action.payload[0],\r\n                check: action.payload[1],\r\n                title: action.payload[2]\r\n              }\r\n          }\r\n        }\r\n      };\r\n    case FILTER_TASKS:\r\n      return {\r\n        ...state,\r\n        filter: action.payload\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n\r\nexport default taskReducer;","export const ADD_TASK = 'ADD_TASK';\r\nexport const CHANGE_TASK_STATUS = 'CHANGE__CHECK';\r\nexport const REMOVE_TASK = 'REMOVE_TASK';\r\nexport const SELECT_ALL_TASK = 'SELECT_ALL_TASK';\r\nexport const CONTROL_ALL_SELECTED = 'CONTROL_ALL_SELECTED';\r\nexport const LEFT_TASKS = 'LEFT_TASKS';\r\nexport const REMOVE_SELECT_TASKS = 'REMOVE_SELECT_TASKS';\r\nexport const END_EDIT_TASK = 'END_EDIT_TASK';\r\nexport const FILTER_TASKS =  'FILTER_TASKS';\r\n","import { combineReducers, createStore } from 'redux';\r\nimport taskReducer from '../models/todo/reducers';\r\nimport { devToolsEnhancer } from 'redux-devtools-extension';\r\n\r\n\r\nconst reducer = combineReducers(\r\n  {\r\n    task: taskReducer\r\n  }\r\n);\r\n\r\nconst store = createStore(reducer, /* preloadedState, */ devToolsEnhancer(\r\n  // Specify name here, actionsBlacklist, actionsCreators and other options if needed\r\n));\r\n\r\n\r\nexport default store;","import { createSelector } from 'reselect';\r\n\r\nconst getTasks = (state) => {\r\n  return state.task.tasks.entities;\r\n};\r\n\r\nexport const getTasksReselect = createSelector([getTasks], (entities) => entities);\r\n\r\nconst getIds = (state) => {\r\n  return state.task.tasks.ids;\r\n};\r\n\r\nexport const getIdsReselect = createSelector([getIds], (ids) => ids);\r\n\r\nconst getAllSelectedFromState = (state) => {\r\n  return state.task.allSelected;\r\n};\r\n\r\nexport const getAllSelectedReselect = createSelector([getAllSelectedFromState], (allSelected) => allSelected);\r\n\r\nconst getLeftTasks = (state) => {\r\n  return state.task.leftTasks;\r\n};\r\n\r\nexport const getLeftTasksReselect = createSelector([getLeftTasks], (leftTasks) => leftTasks);\r\n\r\nconst getFilterValue = (state) => {\r\n  return state.task.filter;\r\n};\r\n\r\nexport const getFilterValueReselect = createSelector([getFilterValue], (filter) => filter);\r\n\r\nexport const getFilteredTasksReselect = (type, tasks) => createSelector([getIds], (ids) => {\r\n  return ids.filter(t => {\r\n    switch (type) {\r\n      case 'All':\r\n        return tasks[t];\r\n      case 'Active':\r\n        return !tasks[t].check;\r\n      case 'Completed':\r\n        return tasks[t].check;\r\n      default:\r\n        return tasks[t];\r\n    }\r\n  });\r\n});\r\nexport const getTasksCount = createSelector([getIds], (ids) => ids.length);\r\nexport const hasTasks = createSelector([getTasksCount], (ids) => Boolean(ids));\r\n","import { useSelector } from 'react-redux';\r\n\r\nexport default (func, params = {}) => useSelector(state => func(state, params));","import { useCallback } from 'react';\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nconst useAction = type => {\r\n  const dispatch = useDispatch();\r\n  return useCallback((payload = {}) => dispatch({type, payload}), [\r\n    dispatch,\r\n    type\r\n  ]);\r\n};\r\n\r\nexport default useAction;\r\n\r\n","import React, { memo } from 'react';\r\nimport classes from './Task.module.css';\r\nimport classnames from 'classnames';\r\n\r\nconst Task = ({\r\n  isCheck,\r\n  id,\r\n  task,\r\n  editMode,\r\n  cacheValueTask,\r\n  currentEditTask,\r\n  changeBox,\r\n  removeTask,\r\n  startChangeTask,\r\n  changeValueTask,\r\n  stopChangeTask\r\n}) => {\r\n  \r\n  return (\r\n    <li className={classes.item} onDoubleClick={startChangeTask}>\r\n      {!editMode\r\n        ? <label className={classes.toggle}>\r\n          <input type=\"checkbox\"/>\r\n          <span\r\n            onClick={changeBox}\r\n            className={classnames(\r\n            classes.checkboxCustom,\r\n            isCheck && classes.check\r\n          )}\r\n          />\r\n          <span className={classes.text} id={id}>\r\n            {task}\r\n          </span>\r\n          <button className={classes.removeBtn} onClick={removeTask} />\r\n          <button className={classes.taskText} />\r\n      </label>\r\n        : <input\r\n          ref={currentEditTask}\r\n          autoFocus\r\n          className={classnames(\r\n            classes.edit,\r\n            editMode && classes.active\r\n          )}\r\n          value={cacheValueTask}\r\n          onChange={(e) => changeValueTask(e.currentTarget.value)}\r\n          onBlur={(e) => stopChangeTask(e, cacheValueTask)}\r\n          onKeyDown={(e) => stopChangeTask(e, cacheValueTask)}\r\n        />\r\n      }\r\n    </li>\r\n  )\r\n};\r\n\r\nexport default memo(Task);","import React, { useState, useCallback, useRef } from 'react';\r\nimport Task from './Task';\r\nimport useAction from '../../../hooks/useAction';\r\nimport { CHANGE_TASK_STATUS, END_EDIT_TASK, REMOVE_TASK } from '../../../models/todo/actions';\r\n\r\nconst TaskContainer = ({\r\n  id,\r\n  isCheck,\r\n  task,\r\n}) => {\r\n  const [editMode, setEditMode] = useState(false);\r\n  const [cacheValueTask, changeCacheValueTask] = useState('');\r\n  const changeCheck = useAction(CHANGE_TASK_STATUS);\r\n  const removeTaskHook = useAction(REMOVE_TASK);\r\n  const endEditTask = useAction(END_EDIT_TASK);\r\n  const currentEditTask = useRef(null);\r\n  const changeBox = () => {\r\n    changeCheck([id, !isCheck, task]);\r\n  };\r\n  const removeTask = () => {\r\n    removeTaskHook(id);\r\n  };\r\n\r\n  const startChangeTask = () => {\r\n    setEditMode(true);\r\n    changeCacheValueTask(task);\r\n  };\r\n\r\n  const changeValueTask = useCallback((value) => {\r\n    changeCacheValueTask(value);\r\n  }, [changeCacheValueTask]);\r\n\r\n  const stopEditTask = (value) => {\r\n    endEditTask([id, isCheck, value]);\r\n    if (value === '') {\r\n      removeTaskHook(id);\r\n    }\r\n    setEditMode(false);\r\n  };\r\n\r\n\r\n  const stopChangeTask = (event, value) => {\r\n    if (event.key === 'Enter') {\r\n      stopEditTask(value);\r\n    } else if (event.currentTarget === currentEditTask.current && !event.key) {\r\n      stopEditTask(value);\r\n    } else if (event.key === 'Escape') {\r\n      stopEditTask(task);\r\n    }\r\n  };\r\n\r\n\r\n  return (\r\n    <Task\r\n      isCheck = {isCheck}\r\n      id = {id}\r\n      task = {task}\r\n      editMode={editMode}\r\n      cacheValueTask={cacheValueTask}\r\n      currentEditTask={currentEditTask}\r\n      changeBox={changeBox}\r\n      removeTask={removeTask}\r\n      startChangeTask={startChangeTask}\r\n      changeValueTask={(changeValueTask)}\r\n      stopChangeTask={stopChangeTask}\r\n    />\r\n  )\r\n};\r\n\r\nexport default TaskContainer;","import React  from 'react';\r\nimport classes from './TaskList.module.css';\r\nimport useSelector from '../../hooks/useSelector';\r\nimport {\r\n  getFilteredTasksReselect,\r\n  getFilterValueReselect,\r\n  getTasksReselect\r\n} from '../../models/todo/selectors';\r\nimport TaskContainer from './Task/TaskContainer';\r\n\r\n\r\nconst TaskList = () => {\r\n  let tasks = useSelector(getTasksReselect);\r\n  const filter = useSelector(getFilterValueReselect);\r\n  const filteredTasks = useSelector(getFilteredTasksReselect(filter, tasks));\r\n  tasks = filteredTasks.map((t, index) => {\r\n    return <TaskContainer\r\n      key={index}\r\n      id={tasks[t].id}\r\n      isCheck={tasks[t].check}\r\n      task={tasks[t].title}\r\n      tasks = {tasks}\r\n    />;\r\n  });\r\n  \r\n  \r\n  return (<section className={classes.main}>\r\n      <ul className={classes.todoList}>\r\n        {tasks}\r\n      </ul>\r\n    </section>\r\n  )\r\n};\r\n\r\n\r\nexport default TaskList;","import React, { memo } from 'react';\r\nimport classes from './FieldCreatingNewTasks.module.css';\r\nimport classnames from 'classnames';\r\n\r\nconst FieldCreatingNewTask =({\r\n  isTasks,\r\n  changeValue,\r\n  selectAll,\r\n  value,\r\n  isAllSelected\r\n}) => {\r\n  return (\r\n    <div className={classes.header}>\r\n      <input\r\n        onChange={changeValue}\r\n        onKeyPress={changeValue}\r\n        autoFocus\r\n        className={classes.todosInput}\r\n        value={value}\r\n        placeholder=\"What needs to be done?\"\r\n      />\r\n      {isTasks &&\r\n      <button\r\n        onClick={selectAll}\r\n        className={classnames(\r\n          classes.toggleAll,\r\n          isAllSelected && classes.active\r\n        )}\r\n      />}\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport default  memo(FieldCreatingNewTask);","import React, { useState, useCallback } from 'react';\r\nimport FieldCreatingNewTask from './FieldCreatingNewTasks';\r\nimport nanoid from 'nanoid';\r\nimport useSelector from '../../hooks/useSelector';\r\nimport { getAllSelectedReselect } from '../../models/todo/selectors';\r\nimport useAction from '../../hooks/useAction';\r\nimport { ADD_TASK, SELECT_ALL_TASK } from '../../models/todo/actions';\r\n\r\nconst FieldCreatingNewTaskContainer = ({countTasks}) => {\r\n  const allSelected = useSelector(getAllSelectedReselect);\r\n  const addTask = useAction(ADD_TASK);\r\n  const selectedAllTasks = useAction(SELECT_ALL_TASK);\r\n  let [value, editValue] = useState('');\r\n\r\n  const changeValue = useCallback(e => {\r\n    editValue(e.currentTarget.value);\r\n    if (e.key === 'Enter' && e.currentTarget.value.trim()) {\r\n      addTask([nanoid(), e.currentTarget.value]);\r\n      editValue('');\r\n    }\r\n  }, [editValue, addTask]);\r\n  \r\n\r\n  const selectAll = () => {\r\n      selectedAllTasks();\r\n  };\r\n\r\n  return (\r\n    <FieldCreatingNewTask\r\n      isTasks = {countTasks}\r\n      selectAll = {selectAll}\r\n      isAllSelected = {Boolean(allSelected)}\r\n      value = {value}\r\n      changeValue = {changeValue}\r\n    />\r\n  )\r\n};\r\n\r\n\r\nexport default FieldCreatingNewTaskContainer;","import React from 'react';\r\nimport classes from './Footer.module.css';\r\nimport classnames from 'classnames';\r\nimport { useSelector } from 'react-redux';\r\nimport { getTasksCount } from '../../models/todo/selectors';\r\n\r\n\r\nconst Footer = ({\r\n  leftTasks,\r\n  removeSelectedTask,\r\n  filter,\r\n  filterTasks\r\n}) => {\r\n  const countTasks = useSelector(getTasksCount);\r\n  return (\r\n    <div className={classes.dataFooter}>\r\n\t\t  <span className={classes.todoCount}>\r\n\t\t\t<strong>{leftTasks}</strong>\r\n\t\t\t  item left\r\n\t\t  </span>\r\n        <ul className={classes.filters}>\r\n          <li>\r\n            <a href=\"#/All\"\r\n              className={classnames(\r\n                classes.filterBtnJs,\r\n                filter === 'All' && classes.active\r\n              )}\r\n              onClick={(e) => filterTasks(e.currentTarget.innerText)}>All</a>\r\n          </li>\r\n          <li>\r\n            <a href=\"#/Active\"\r\n              className={classnames(\r\n                classes.filterBtnJs,\r\n                filter === 'Active' && classes.active\r\n              )}\r\n              onClick={(e) => filterTasks(e.currentTarget.innerText)}>Active</a>\r\n          </li>\r\n          <li>\r\n            <a href=\"#/Completed\"\r\n              className={classnames(\r\n                classes.filterBtnJs,\r\n                filter === 'Completed' && classes.active\r\n              )}\r\n              onClick={(e) => filterTasks(e.currentTarget.innerText)}>Completed</a>\r\n          </li>\r\n        </ul>\r\n        <button\r\n          className={classnames(\r\n            classes.clear,\r\n            leftTasks < countTasks && classes.active\r\n          )}\r\n          onClick={() => {removeSelectedTask()}}>\r\n          Clear completed\r\n        </button>\r\n      </div>\r\n    )\r\n};\r\n\r\nexport default Footer;","import React from 'react';\r\nimport Footer from './Footer';\r\nimport useSelector from '../../hooks/useSelector';\r\nimport {\r\n  getFilterValueReselect,\r\n  getLeftTasksReselect,\r\n} from '../../models/todo/selectors';\r\nimport useAction from '../../hooks/useAction';\r\nimport { FILTER_TASKS, REMOVE_SELECT_TASKS } from '../../models/todo/actions';\r\n\r\n\r\nconst FooterContainer = () => {\r\n  const leftTasks = useSelector(getLeftTasksReselect);\r\n  const filter = useSelector(getFilterValueReselect);\r\n  const removeSelectedTasks = useAction(REMOVE_SELECT_TASKS);\r\n  const filterTasks = useAction(FILTER_TASKS);\r\n  \r\n  const filteredTasks = (method) => {\r\n    filterTasks(method);\r\n  };\r\n  \r\n  const removeSelectedTask = () => {\r\n    removeSelectedTasks();\r\n  };\r\n  \r\n  \r\n  return (\r\n    <Footer\r\n      leftTasks={leftTasks}\r\n      removeSelectedTask={removeSelectedTask}\r\n      filter={filter}\r\n      filterTasks={filteredTasks}\r\n    />\r\n  )\r\n};\r\n\r\nexport default FooterContainer;","import React, { Fragment } from 'react';\r\nimport classes from './../../TodoList.module.css';\r\nimport TaskList from '../taskList/TaskList';\r\nimport FieldCreatingNewTaskContainer from '../fieldCreatingNewTasks/FieldCreatingNewTasksContainer';\r\nimport FooterContainer from '../footer/FooterContainer';\r\nimport useSelector from '../../hooks/useSelector';\r\nimport { hasTasks } from '../../models/todo/selectors';\r\n\r\n\r\nconst TodoList = () => {\r\n  const isTasks = useSelector(hasTasks);\r\n  return (\r\n    <Fragment>\r\n      <header className={classes.headerText}>todos</header>\r\n      <div className={classes.todo}>\r\n        <FieldCreatingNewTaskContainer countTasks = {isTasks} />\r\n        <TaskList />\r\n        {isTasks && <FooterContainer />}\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default TodoList;\r\n","import React, { useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport store from './state/Store';\nimport { Provider } from 'react-redux';\nimport {\n  getFilterValueReselect, getIdsReselect,\n  getTasksReselect,\n} from './models/todo/selectors';\nimport useSelector from './hooks/useSelector';\nimport { CONTROL_ALL_SELECTED, LEFT_TASKS } from './models/todo/actions';\nimport useAction from './hooks/useAction';\nimport TodoList from './components/todoList/TodoList';\n\n\n\nconst  TodoListApp  = () => {\n  const tasks = useSelector(getTasksReselect);\n  const filter = useSelector(getFilterValueReselect);\n  const ids = useSelector(getIdsReselect);\n  const controllAllSelected = useAction(CONTROL_ALL_SELECTED);\n  const getCountLeftTasks = useAction(LEFT_TASKS);\n  useEffect(() => {\n    const count = ids.filter(t => !tasks[t].check).length;\n    getCountLeftTasks(count);\n    controllAllSelected();\n  }, [tasks, ids, controllAllSelected, getCountLeftTasks, filter]);\n  return (\n    <TodoList  tasks = {tasks} />\n  );\n};\n\n\n\n\n\nReactDOM.render (\n  <Provider store={store}>\n  <TodoListApp />\n  </Provider>, document.getElementById('root'));"],"sourceRoot":""}